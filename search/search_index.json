{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Teste T\u00e9cnico da Globo - Backend FastAPI","text":"<p>Este projeto \u00e9 um backend desenvolvido em FastAPI que permite inserir, armazenar, listar, recuperar e deletar URLs do YouTube. A aplica\u00e7\u00e3o foi criada como parte de um teste t\u00e9cnico para a Globo.</p>"},{"location":"#arquitetura-limpa","title":"Arquitetura Limpa","text":"<p>Foquei em construir uma arquitetura limpa para esta aplica\u00e7\u00e3o, seguindo os princ\u00edpios de separa\u00e7\u00e3o de preocupa\u00e7\u00f5es e modularidade. A arquitetura limpa traz os seguintes benef\u00edcios:</p> <ul> <li>Manutenibilidade: A estrutura organizada do c\u00f3digo facilita a identifica\u00e7\u00e3o e corre\u00e7\u00e3o de problemas, permitindo que desenvolvedores trabalhem de forma mais eficiente.</li> <li>Testabilidade: Com a separa\u00e7\u00e3o de responsabilidades, cada componente da aplica\u00e7\u00e3o pode ser testado de forma isolada, aumentando a cobertura de testes e a confiabilidade do software.</li> <li>Escalabilidade: Uma arquitetura bem projetada permite que a aplica\u00e7\u00e3o cres\u00e7a facilmente. Novas funcionalidades podem ser adicionadas sem impactar outras partes do sistema.</li> <li>Flexibilidade: Altera\u00e7\u00f5es em um componente t\u00eam pouco ou nenhum impacto em outros, permitindo adapta\u00e7\u00f5es r\u00e1pidas \u00e0s necessidades do neg\u00f3cio.</li> </ul>"},{"location":"#funcionalidades","title":"Funcionalidades","text":"<p>A aplica\u00e7\u00e3o oferece as seguintes funcionalidades:</p> <ul> <li>Inserir e armazenar uma URL do YouTube: Voc\u00ea pode adicionar novas URLs do YouTube ao banco de dados.</li> <li>Listar as URLs salvas: A aplica\u00e7\u00e3o pode retornar todas as URLs armazenadas.</li> <li>Recuperar a URL e tocar atrav\u00e9s da solu\u00e7\u00e3o: \u00c9 poss\u00edvel recuperar uma URL espec\u00edfica e reproduzi-la.</li> <li>Deletar a URL: Voc\u00ea pode remover uma URL do banco de dados.</li> </ul>"},{"location":"architecture/","title":"Arquitetura do Projeto","text":"<p>Este projeto segue os princ\u00edpios da Arquitetura Limpa (Clean Architecture), com o objetivo de garantir uma organiza\u00e7\u00e3o modular e separa\u00e7\u00e3o clara de responsabilidades. A arquitetura est\u00e1 dividida em quatro camadas principais: Application, Domain, Infrastructure e Presentation.</p>"},{"location":"architecture/#camadas-da-arquitetura","title":"Camadas da Arquitetura","text":""},{"location":"architecture/#1-application","title":"1. Application","text":"<p>A camada Application \u00e9 respons\u00e1vel por orquestrar a l\u00f3gica da aplica\u00e7\u00e3o, conectando a camada de apresenta\u00e7\u00e3o \u00e0 l\u00f3gica de neg\u00f3cio. Aqui est\u00e3o os casos de uso (use cases) que implementam as regras de neg\u00f3cio e controlam o fluxo dos dados.</p>"},{"location":"architecture/#2-domain","title":"2. Domain","text":"<p>A camada Domain cont\u00e9m as regras de neg\u00f3cio puras e as entidades centrais do sistema. Esta camada \u00e9 independente das demais e tem como objetivo manter a l\u00f3gica essencial do neg\u00f3cio.</p>"},{"location":"architecture/#3-infrastructure","title":"3. Infrastructure","text":"<p>A camada Infrastructure lida com as implementa\u00e7\u00f5es concretas, como reposit\u00f3rios de dados, servi\u00e7os externos e comunica\u00e7\u00e3o com o banco de dados.</p>"},{"location":"architecture/#4-presentation","title":"4. Presentation","text":"<p>A camada Presentation \u00e9 respons\u00e1vel pela intera\u00e7\u00e3o com o usu\u00e1rio final, lidando com as requisi\u00e7\u00f5es e respostas HTTP. Neste projeto, utilizamos o FastAPI para definir as rotas e os endpoints da API.</p> <p>Exemplos de funcionalidades da camada de apresenta\u00e7\u00e3o incluem:</p> <ul> <li>Rotas (routers): S\u00e3o respons\u00e1veis por mapear as URLs para os controladores correspondentes. Cada rota define um endpoint da API.</li> <li>Schemas: Especificam a estrutura dos dados que ser\u00e3o recebidos e enviados pelas rotas, garantindo valida\u00e7\u00f5es apropriadas.</li> </ul> <p>Essa camada cuida da intera\u00e7\u00e3o entre o usu\u00e1rio e a aplica\u00e7\u00e3o, garantindo que as informa\u00e7\u00f5es fluam de maneira eficiente e com seguran\u00e7a.</p>"},{"location":"architecture/#beneficios-da-arquitetura","title":"Benef\u00edcios da Arquitetura","text":"<p>Ao organizar o sistema em camadas, ganhamos os seguintes benef\u00edcios:</p> <ul> <li>Manutenibilidade: As camadas s\u00e3o independentes, facilitando a manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do sistema.</li> <li>Escalabilidade: O projeto pode ser facilmente expandido, com novas funcionalidades adicionadas sem impactar o funcionamento existente.</li> <li>Testabilidade: A separa\u00e7\u00e3o de responsabilidades torna cada camada isolada, facilitando a cria\u00e7\u00e3o de testes unit\u00e1rios e de integra\u00e7\u00e3o.</li> </ul> <p>Essa arquitetura modular facilita o desenvolvimento de um sistema escal\u00e1vel, flex\u00edvel e preparado para crescer \u00e0 medida que novas demandas surgirem.</p>"},{"location":"codigo/source/application/use_cases/create/","title":"Create","text":""},{"location":"codigo/source/application/use_cases/create/#src.application.use_cases.create.CreateVideoUseCase","title":"<code>CreateVideoUseCase</code>","text":"<p>               Bases: <code>AbstractCreateVideoUseCase</code></p> <p>Use case for video-related operations.</p> <p>This class encapsulates the business logic for handling video-related actions, such as creating a new video and checking for duplicates.</p> Source code in <code>src/application/use_cases/create.py</code> <pre><code>class CreateVideoUseCase(AbstractCreateVideoUseCase):\n    \"\"\"Use case for video-related operations.\n\n    This class encapsulates the business logic for handling video-related actions,\n    such as creating a new video and checking for duplicates.\n    \"\"\"\n\n    def __init__(self, video_repository: AbstractVideoRepository):\n        \"\"\"Initializes the VideoUseCase.\n\n        Args:\n            video_repository (AbstractVideoRepository): The repository to store video entities.\n        \"\"\"\n        self.video_repository = video_repository\n\n    def execute(self, url: str) -&gt; VideoEntity:\n        \"\"\"Executes the use case to handle video operations.\n\n        This method verifies if a video with the same URL already exists before creating a new one.\n\n        Args:\n            url (str): The URL of the video to create.\n\n        Returns:\n            (VideoEntity): A instance of video entity\n\n        Raises:\n            (InvalidUrlError): If the URL is invalid or a video with the same URL already exists.\n        \"\"\"\n        existing_video = self.video_repository.find_by_url(url)\n        if existing_video:\n            raise DuplicateUrlError(\n                message=ErrorMessagesEnum.DUPLICATE_URL.value,\n                name=\"DuplicateUrl\",\n            )\n\n        new_video = VideoFactory.create(url)\n\n        created_video = self.video_repository.create(new_video)\n\n        return created_video\n</code></pre>"},{"location":"codigo/source/application/use_cases/create/#src.application.use_cases.create.CreateVideoUseCase.__init__","title":"<code>__init__(video_repository)</code>","text":"<p>Initializes the VideoUseCase.</p> <p>Parameters:</p> Name Type Description Default <code>video_repository</code> <code>AbstractVideoRepository</code> <p>The repository to store video entities.</p> required Source code in <code>src/application/use_cases/create.py</code> <pre><code>def __init__(self, video_repository: AbstractVideoRepository):\n    \"\"\"Initializes the VideoUseCase.\n\n    Args:\n        video_repository (AbstractVideoRepository): The repository to store video entities.\n    \"\"\"\n    self.video_repository = video_repository\n</code></pre>"},{"location":"codigo/source/application/use_cases/create/#src.application.use_cases.create.CreateVideoUseCase.execute","title":"<code>execute(url)</code>","text":"<p>Executes the use case to handle video operations.</p> <p>This method verifies if a video with the same URL already exists before creating a new one.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to create.</p> required <p>Returns:</p> Type Description <code>VideoEntity</code> <p>A instance of video entity</p> <p>Raises:</p> Type Description <code>InvalidUrlError</code> <p>If the URL is invalid or a video with the same URL already exists.</p> Source code in <code>src/application/use_cases/create.py</code> <pre><code>def execute(self, url: str) -&gt; VideoEntity:\n    \"\"\"Executes the use case to handle video operations.\n\n    This method verifies if a video with the same URL already exists before creating a new one.\n\n    Args:\n        url (str): The URL of the video to create.\n\n    Returns:\n        (VideoEntity): A instance of video entity\n\n    Raises:\n        (InvalidUrlError): If the URL is invalid or a video with the same URL already exists.\n    \"\"\"\n    existing_video = self.video_repository.find_by_url(url)\n    if existing_video:\n        raise DuplicateUrlError(\n            message=ErrorMessagesEnum.DUPLICATE_URL.value,\n            name=\"DuplicateUrl\",\n        )\n\n    new_video = VideoFactory.create(url)\n\n    created_video = self.video_repository.create(new_video)\n\n    return created_video\n</code></pre>"},{"location":"codigo/source/application/use_cases/delete/","title":"Delete","text":""},{"location":"codigo/source/application/use_cases/delete/#src.application.use_cases.delete.DeleteVideoUseCase","title":"<code>DeleteVideoUseCase</code>","text":"<p>               Bases: <code>AbstractDeleteVideoUseCase</code></p> <p>Concrete use case for deleting a video by URL.</p> Source code in <code>src/application/use_cases/delete.py</code> <pre><code>class DeleteVideoUseCase(AbstractDeleteVideoUseCase):\n    \"\"\"Concrete use case for deleting a video by URL.\"\"\"\n\n    def __init__(self, video_repository: AbstractVideoRepository):\n        \"\"\"Initializes the DeleteVideoUseCase.\n\n        Args:\n            video_repository (AbstractVideoRepository): The repository to delete video entities.\n        \"\"\"\n        self.video_repository = video_repository\n\n    def execute(self, id: str) -&gt; str:\n        \"\"\"Deletes a video by its URL.\n\n        Args:\n            id (str): The ID of the video to delete.\n\n        Returns:\n            SuccessMessagesEnum: The DTO containing the status code and message.\n\n        Raises:\n            (str): A success message\n        \"\"\"\n        video = self.video_repository.find_by_id(id)\n\n        if not video:\n            raise VideoNotFoundError(\n                message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n                name=\"VideoNotFoundError\",\n            )\n\n        self.video_repository.delete(video)\n\n        return SuccessMessagesEnum.VIDEO_DELETED_SUCCESS.value\n</code></pre>"},{"location":"codigo/source/application/use_cases/delete/#src.application.use_cases.delete.DeleteVideoUseCase.__init__","title":"<code>__init__(video_repository)</code>","text":"<p>Initializes the DeleteVideoUseCase.</p> <p>Parameters:</p> Name Type Description Default <code>video_repository</code> <code>AbstractVideoRepository</code> <p>The repository to delete video entities.</p> required Source code in <code>src/application/use_cases/delete.py</code> <pre><code>def __init__(self, video_repository: AbstractVideoRepository):\n    \"\"\"Initializes the DeleteVideoUseCase.\n\n    Args:\n        video_repository (AbstractVideoRepository): The repository to delete video entities.\n    \"\"\"\n    self.video_repository = video_repository\n</code></pre>"},{"location":"codigo/source/application/use_cases/delete/#src.application.use_cases.delete.DeleteVideoUseCase.execute","title":"<code>execute(id)</code>","text":"<p>Deletes a video by its URL.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the video to delete.</p> required <p>Returns:</p> Name Type Description <code>SuccessMessagesEnum</code> <code>str</code> <p>The DTO containing the status code and message.</p> <p>Raises:</p> Type Description <code>str</code> <p>A success message</p> Source code in <code>src/application/use_cases/delete.py</code> <pre><code>def execute(self, id: str) -&gt; str:\n    \"\"\"Deletes a video by its URL.\n\n    Args:\n        id (str): The ID of the video to delete.\n\n    Returns:\n        SuccessMessagesEnum: The DTO containing the status code and message.\n\n    Raises:\n        (str): A success message\n    \"\"\"\n    video = self.video_repository.find_by_id(id)\n\n    if not video:\n        raise VideoNotFoundError(\n            message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n            name=\"VideoNotFoundError\",\n        )\n\n    self.video_repository.delete(video)\n\n    return SuccessMessagesEnum.VIDEO_DELETED_SUCCESS.value\n</code></pre>"},{"location":"codigo/source/application/use_cases/read_all/","title":"Read all","text":""},{"location":"codigo/source/application/use_cases/read_all/#src.application.use_cases.read_all.ReadAllVideosUseCase","title":"<code>ReadAllVideosUseCase</code>","text":"<p>               Bases: <code>AbstractReadAllVideosUseCase</code></p> <p>Concrete use case for retrieving all videos.</p> <p>This class implements the logic for fetching all video entities from the repository.</p> Source code in <code>src/application/use_cases/read_all.py</code> <pre><code>class ReadAllVideosUseCase(AbstractReadAllVideosUseCase):\n    \"\"\"Concrete use case for retrieving all videos.\n\n    This class implements the logic for fetching all video entities from the repository.\n    \"\"\"\n\n    def __init__(self, video_repository: AbstractVideoRepository):\n        \"\"\"Initializes the abstract ReadAllVideosUseCase.\n\n        Args:\n            video_repository (AbstractVideoRepository): The repository to retrieve video entities.\n        \"\"\"\n        self.video_repository = video_repository\n\n    def execute(self) -&gt; List[VideoEntity]:\n        \"\"\"Fetches all videos from the repository.\n\n        Returns:\n            (List[VideoEntity]): A video entity list\n\n        Raises:\n            VideoNotFoundError: If no videos are found in the repository.\n        \"\"\"\n        videos = self.video_repository.find_all()\n\n        if not videos:\n            raise VideoNotFoundError(\n                message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n                name=\"VideoNotFoundError\",\n            )\n\n        return videos\n</code></pre>"},{"location":"codigo/source/application/use_cases/read_all/#src.application.use_cases.read_all.ReadAllVideosUseCase.__init__","title":"<code>__init__(video_repository)</code>","text":"<p>Initializes the abstract ReadAllVideosUseCase.</p> <p>Parameters:</p> Name Type Description Default <code>video_repository</code> <code>AbstractVideoRepository</code> <p>The repository to retrieve video entities.</p> required Source code in <code>src/application/use_cases/read_all.py</code> <pre><code>def __init__(self, video_repository: AbstractVideoRepository):\n    \"\"\"Initializes the abstract ReadAllVideosUseCase.\n\n    Args:\n        video_repository (AbstractVideoRepository): The repository to retrieve video entities.\n    \"\"\"\n    self.video_repository = video_repository\n</code></pre>"},{"location":"codigo/source/application/use_cases/read_all/#src.application.use_cases.read_all.ReadAllVideosUseCase.execute","title":"<code>execute()</code>","text":"<p>Fetches all videos from the repository.</p> <p>Returns:</p> Type Description <code>List[VideoEntity]</code> <p>A video entity list</p> <p>Raises:</p> Type Description <code>VideoNotFoundError</code> <p>If no videos are found in the repository.</p> Source code in <code>src/application/use_cases/read_all.py</code> <pre><code>def execute(self) -&gt; List[VideoEntity]:\n    \"\"\"Fetches all videos from the repository.\n\n    Returns:\n        (List[VideoEntity]): A video entity list\n\n    Raises:\n        VideoNotFoundError: If no videos are found in the repository.\n    \"\"\"\n    videos = self.video_repository.find_all()\n\n    if not videos:\n        raise VideoNotFoundError(\n            message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n            name=\"VideoNotFoundError\",\n        )\n\n    return videos\n</code></pre>"},{"location":"codigo/source/domain/entities/video/","title":"Video","text":""},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity","title":"<code>VideoEntity</code>","text":"<p>A class representing a video entity.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[UUID]</code> <p>Unique identifier for the video. Defaults to None, will generate a UUID if not provided.</p> <code>url</code> <code>str</code> <p>URL of the video. Required field.</p> <code>created_at</code> <code>Optional[datetime]</code> <p>Date and time when the video was created. Defaults to the current time.</p> <code>updated_at</code> <code>Optional[datetime]</code> <p>Date and time when the video was last updated. Defaults to None.</p> Source code in <code>src/domain/entities/video.py</code> <pre><code>class VideoEntity:\n    \"\"\"\n    A class representing a video entity.\n\n    Attributes:\n        id (Optional[uuid.UUID]): Unique identifier for the video. Defaults to None, will generate a UUID if not provided.\n        url (str): URL of the video. Required field.\n        created_at (Optional[datetime]): Date and time when the video was created. Defaults to the current time.\n        updated_at (Optional[datetime]): Date and time when the video was last updated. Defaults to None.\n    \"\"\"\n\n    URL_REGEX = re.compile(r\"^(http|https)://\")\n\n    def __init__(\n        self,\n        url: str,\n        id: Optional[uuid.UUID] = None,\n        created_at: Optional[datetime] = None,\n        updated_at: Optional[datetime] = None,\n    ):\n        \"\"\"\n        Initializes a new instance of the VideoEntity class.\n\n        Args:\n            url (str): The URL of the video. Must start with http or https.\n            id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n            created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n            updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n        \"\"\"\n        self._id = id or uuid.uuid4()\n        self.url = url\n        self._created_at = created_at or datetime.now()\n        self._updated_at = updated_at\n\n    @property\n    def id(self) -&gt; uuid.UUID:\n        \"\"\"Gets the unique identifier of the video.\"\"\"\n        return self._id\n\n    @id.setter\n    def id(self, value: Optional[uuid.UUID]) -&gt; None:\n        \"\"\"Sets the unique identifier of the video.\"\"\"\n        self._id = value or uuid.uuid4()\n\n    @property\n    def url(self) -&gt; str:\n        \"\"\"Gets the URL of the video.\"\"\"\n        return self._url\n\n    @url.setter\n    def url(self, value: str) -&gt; None:\n        \"\"\"\n        Sets the URL of the video with validation.\n\n        Args:\n            value (str): The new URL of the video. Must be a valid URL starting with http or https.\n\n        Raises:\n            (InvalidUrlError): If the URL is invalid.\n        \"\"\"\n        if not self.URL_REGEX.match(value):\n            raise InvalidUrlError(\n                message=ErrorMessagesEnum.INVALID_URL.value, name=\"InvalidUrl\"\n            )\n        self._url = value\n\n    @property\n    def created_at(self) -&gt; datetime:\n        \"\"\"Gets the creation timestamp of the video.\"\"\"\n        return self._created_at\n\n    @created_at.setter\n    def created_at(self, value: Optional[datetime]) -&gt; None:\n        \"\"\"\n        Sets the creation timestamp of the video.\n\n        Args:\n            value (Optional[datetime]): The new creation date and time. Defaults to the current time.\n        \"\"\"\n        self._created_at = value or datetime.now()\n\n    @property\n    def updated_at(self) -&gt; Optional[datetime]:\n        \"\"\"Gets the last updated timestamp of the video.\"\"\"\n        return self._updated_at\n\n    @updated_at.setter\n    def updated_at(self, value: datetime):\n        \"\"\"Sets the updated_at timestamp.\n\n        Args:\n            value (datetime): The new updated timestamp.\n        \"\"\"\n        if value is not None:\n            self._updated_at = value\n        else:\n            self._updated_at = datetime.now()\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Returns a string representation of the VideoEntity instance.\n\n        Returns:\n            str: A string that represents the video entity, including its id, URL, and timestamps.\n        \"\"\"\n        return (\n            f\"VideoEntity(id={self.id}, url='{self.url}', \"\n            f\"created_at='{self.created_at}', updated_at='{self.updated_at}')\"\n        )\n</code></pre>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.created_at","title":"<code>created_at: datetime</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the creation timestamp of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.id","title":"<code>id: uuid.UUID</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the unique identifier of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.updated_at","title":"<code>updated_at: Optional[datetime]</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the last updated timestamp of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.url","title":"<code>url: str</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the URL of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.__init__","title":"<code>__init__(url, id=None, created_at=None, updated_at=None)</code>","text":"<p>Initializes a new instance of the VideoEntity class.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video. Must start with http or https.</p> required <code>id</code> <code>Optional[UUID]</code> <p>Unique identifier for the video. If None, a UUID will be generated.</p> <code>None</code> <code>created_at</code> <code>Optional[datetime]</code> <p>The creation time of the video. Defaults to the current time.</p> <code>None</code> <code>updated_at</code> <code>Optional[datetime]</code> <p>The last updated time of the video. Defaults to None.</p> <code>None</code> Source code in <code>src/domain/entities/video.py</code> <pre><code>def __init__(\n    self,\n    url: str,\n    id: Optional[uuid.UUID] = None,\n    created_at: Optional[datetime] = None,\n    updated_at: Optional[datetime] = None,\n):\n    \"\"\"\n    Initializes a new instance of the VideoEntity class.\n\n    Args:\n        url (str): The URL of the video. Must start with http or https.\n        id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n        created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n        updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n    \"\"\"\n    self._id = id or uuid.uuid4()\n    self.url = url\n    self._created_at = created_at or datetime.now()\n    self._updated_at = updated_at\n</code></pre>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a string representation of the VideoEntity instance.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string that represents the video entity, including its id, URL, and timestamps.</p> Source code in <code>src/domain/entities/video.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Returns a string representation of the VideoEntity instance.\n\n    Returns:\n        str: A string that represents the video entity, including its id, URL, and timestamps.\n    \"\"\"\n    return (\n        f\"VideoEntity(id={self.id}, url='{self.url}', \"\n        f\"created_at='{self.created_at}', updated_at='{self.updated_at}')\"\n    )\n</code></pre>"},{"location":"codigo/source/domain/enums/error_messages/","title":"Error messages","text":""},{"location":"codigo/source/domain/enums/error_messages/#src.domain.enums.error_messages.ErrorMessagesEnum","title":"<code>ErrorMessagesEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for error messages used in the validation of VideoEntity attributes.</p> <p>Attributes:</p> Name Type Description <code>INVALID_URL</code> <code>str</code> <p>Error message when the URL is invalid. The URL must start with 'http' or 'https'.</p> <code>DUPLICATE_URL</code> <code>str</code> <p>Error message when a video with the same URL already exists in the system.</p> <code>NO_VIDEOS_FOUND</code> <code>str</code> <p>Error message when no videos are found in the system.</p> Source code in <code>src/domain/enums/error_messages.py</code> <pre><code>class ErrorMessagesEnum(Enum):\n    \"\"\"\n    Enum for error messages used in the validation of VideoEntity attributes.\n\n    Attributes:\n        INVALID_URL (str): Error message when the URL is invalid.\n            The URL must start with 'http' or 'https'.\n        DUPLICATE_URL (str): Error message when a video with the same URL\n            already exists in the system.\n        NO_VIDEOS_FOUND (str): Error message when no videos are found in the system.\n    \"\"\"\n\n    INVALID_URL = \"Invalid URL. The URL must start with 'http' or 'https'.\"\n    DUPLICATE_URL = \"A video with the same URL already exists.\"\n    NO_VIDEOS_FOUND = \"No videos were found.\"\n</code></pre>"},{"location":"codigo/source/domain/enums/success_messages/","title":"Success messages","text":""},{"location":"codigo/source/domain/enums/success_messages/#src.domain.enums.success_messages.SuccessMessagesEnum","title":"<code>SuccessMessagesEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for success messages used in the application.</p> <p>This enum contains standardized messages for success responses, such as when a video is created or deleted successfully. Using enums for success messages helps ensure consistency across the application.</p> <p>Attributes:</p> Name Type Description <code>VIDEO_CREATED_SUCCESS</code> <code>str</code> <p>Message returned when a video is successfully created.</p> <code>VIDEO_DELETED_SUCCESS</code> <code>str</code> <p>Message returned when a video is successfully deleted.</p> Source code in <code>src/domain/enums/success_messages.py</code> <pre><code>class SuccessMessagesEnum(Enum):\n    \"\"\"\n    Enum for success messages used in the application.\n\n    This enum contains standardized messages for success responses,\n    such as when a video is created or deleted successfully. Using\n    enums for success messages helps ensure consistency across the\n    application.\n\n    Attributes:\n        VIDEO_CREATED_SUCCESS (str): Message returned when a video is successfully created.\n        VIDEO_DELETED_SUCCESS (str): Message returned when a video is successfully deleted.\n    \"\"\"\n\n    VIDEO_CREATED_SUCCESS = \"Video created successfully\"\n    VIDEOS_LISTED_SUCCESS = \"Video listed successfully\"\n    VIDEO_DELETED_SUCCESS = \"Video deleted successfully\"\n</code></pre>"},{"location":"codigo/source/domain/factories/video/","title":"Video","text":""},{"location":"codigo/source/domain/factories/video/#src.domain.factories.video.VideoFactory","title":"<code>VideoFactory</code>","text":"<p>A factory class for creating instances of VideoEntity.</p> Source code in <code>src/domain/factories/video.py</code> <pre><code>class VideoFactory:\n    \"\"\"\n    A factory class for creating instances of VideoEntity.\n    \"\"\"\n\n    @staticmethod\n    def create(\n        url: str,\n        id: Optional[uuid.UUID] = None,\n        created_at: Optional[datetime] = None,\n        updated_at: Optional[datetime] = None,\n    ) -&gt; VideoEntity:\n        \"\"\"\n        Creates and returns a new instance of VideoEntity with optional parameters for id, created_at, and updated_at.\n\n        Args:\n            url (str): The URL of the video. Must start with http or https.\n            id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n            created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n            updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n\n        Returns:\n            VideoEntity: A new instance of VideoEntity.\n        \"\"\"\n        return VideoEntity(\n            url=url,\n            id=id or uuid.uuid4(),\n            created_at=created_at or datetime.now(),\n            updated_at=updated_at,\n        )\n\n    @staticmethod\n    def create_with_defaults() -&gt; VideoEntity:\n        \"\"\"\n        Creates and returns a new instance of VideoEntity with default values.\n\n        Returns:\n            VideoEntity: A new instance of VideoEntity with default URL and current timestamp.\n        \"\"\"\n        default_url = \"https://example.com/default-video\"\n        return VideoFactory.create(url=default_url)\n</code></pre>"},{"location":"codigo/source/domain/factories/video/#src.domain.factories.video.VideoFactory.create","title":"<code>create(url, id=None, created_at=None, updated_at=None)</code>  <code>staticmethod</code>","text":"<p>Creates and returns a new instance of VideoEntity with optional parameters for id, created_at, and updated_at.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video. Must start with http or https.</p> required <code>id</code> <code>Optional[UUID]</code> <p>Unique identifier for the video. If None, a UUID will be generated.</p> <code>None</code> <code>created_at</code> <code>Optional[datetime]</code> <p>The creation time of the video. Defaults to the current time.</p> <code>None</code> <code>updated_at</code> <code>Optional[datetime]</code> <p>The last updated time of the video. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>A new instance of VideoEntity.</p> Source code in <code>src/domain/factories/video.py</code> <pre><code>@staticmethod\ndef create(\n    url: str,\n    id: Optional[uuid.UUID] = None,\n    created_at: Optional[datetime] = None,\n    updated_at: Optional[datetime] = None,\n) -&gt; VideoEntity:\n    \"\"\"\n    Creates and returns a new instance of VideoEntity with optional parameters for id, created_at, and updated_at.\n\n    Args:\n        url (str): The URL of the video. Must start with http or https.\n        id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n        created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n        updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n\n    Returns:\n        VideoEntity: A new instance of VideoEntity.\n    \"\"\"\n    return VideoEntity(\n        url=url,\n        id=id or uuid.uuid4(),\n        created_at=created_at or datetime.now(),\n        updated_at=updated_at,\n    )\n</code></pre>"},{"location":"codigo/source/domain/factories/video/#src.domain.factories.video.VideoFactory.create_with_defaults","title":"<code>create_with_defaults()</code>  <code>staticmethod</code>","text":"<p>Creates and returns a new instance of VideoEntity with default values.</p> <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>A new instance of VideoEntity with default URL and current timestamp.</p> Source code in <code>src/domain/factories/video.py</code> <pre><code>@staticmethod\ndef create_with_defaults() -&gt; VideoEntity:\n    \"\"\"\n    Creates and returns a new instance of VideoEntity with default values.\n\n    Returns:\n        VideoEntity: A new instance of VideoEntity with default URL and current timestamp.\n    \"\"\"\n    default_url = \"https://example.com/default-video\"\n    return VideoFactory.create(url=default_url)\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/","title":"Video","text":""},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository","title":"<code>AbstractVideoRepository</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for video repositories.</p> <p>This class defines the methods that any concrete video repository must implement.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>class AbstractVideoRepository(ABC):\n    \"\"\"Abstract base class for video repositories.\n\n    This class defines the methods that any concrete video repository must implement.\n    \"\"\"\n\n    @abstractmethod\n    def create(self, video: VideoEntity) -&gt; VideoEntity:\n        \"\"\"Creates a new video in the repository.\n\n        Args:\n            video (VideoEntity): The video entity to create.\n\n        Returns:\n            VideoEntity: The created video entity.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n        \"\"\"Finds a video by URL.\n\n        Args:\n            url (str): The URL of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n        \"\"\"Finds a video by ID.\n\n        Args:\n            id (str): The ID of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def find_all(self) -&gt; List[VideoEntity]:\n        \"\"\"Finds all videos in the repository.\n\n        Returns:\n            List[VideoEntity]: A list of all video entities in the repository.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def delete(self, video: VideoEntity) -&gt; None:\n        \"\"\"Deletes a video from the repository.\n\n        Args:\n            video (VideoEntity): The video entity to delete.\n\n        Raises:\n            Exception: If an error occurs during deletion.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.create","title":"<code>create(video)</code>  <code>abstractmethod</code>","text":"<p>Creates a new video in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to create.</p> required <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>The created video entity.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef create(self, video: VideoEntity) -&gt; VideoEntity:\n    \"\"\"Creates a new video in the repository.\n\n    Args:\n        video (VideoEntity): The video entity to create.\n\n    Returns:\n        VideoEntity: The created video entity.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.delete","title":"<code>delete(video)</code>  <code>abstractmethod</code>","text":"<p>Deletes a video from the repository.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to delete.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If an error occurs during deletion.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef delete(self, video: VideoEntity) -&gt; None:\n    \"\"\"Deletes a video from the repository.\n\n    Args:\n        video (VideoEntity): The video entity to delete.\n\n    Raises:\n        Exception: If an error occurs during deletion.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.find_all","title":"<code>find_all()</code>  <code>abstractmethod</code>","text":"<p>Finds all videos in the repository.</p> <p>Returns:</p> Type Description <code>List[VideoEntity]</code> <p>List[VideoEntity]: A list of all video entities in the repository.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef find_all(self) -&gt; List[VideoEntity]:\n    \"\"\"Finds all videos in the repository.\n\n    Returns:\n        List[VideoEntity]: A list of all video entities in the repository.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.find_by_id","title":"<code>find_by_id(id)</code>  <code>abstractmethod</code>","text":"<p>Finds a video by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n    \"\"\"Finds a video by ID.\n\n    Args:\n        id (str): The ID of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.find_by_url","title":"<code>find_by_url(url)</code>  <code>abstractmethod</code>","text":"<p>Finds a video by URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n    \"\"\"Finds a video by URL.\n\n    Args:\n        url (str): The URL of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/create/","title":"Create","text":""},{"location":"codigo/source/domain/use_cases/create/#src.domain.use_cases.create.AbstractCreateVideoUseCase","title":"<code>AbstractCreateVideoUseCase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract use case for video-related operations.</p> <p>This class defines the blueprint for handling video-related actions, such as creating a new video and checking for duplicates.</p> Source code in <code>src/domain/use_cases/create.py</code> <pre><code>class AbstractCreateVideoUseCase(ABC):\n    \"\"\"Abstract use case for video-related operations.\n\n    This class defines the blueprint for handling video-related actions,\n    such as creating a new video and checking for duplicates.\n    \"\"\"\n\n    @abstractmethod\n    def execute(self, url: str) -&gt; VideoEntity:\n        \"\"\"Abstract method for executing the video operation use case.\n\n        Args:\n            url (str): The URL of the video to create.\n\n        Returns:\n            VideoEntity: A video entity instance\n\n        Raises:\n            InvalidUrlError: If the URL is invalid or a video with the same URL already exists.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/create/#src.domain.use_cases.create.AbstractCreateVideoUseCase.execute","title":"<code>execute(url)</code>  <code>abstractmethod</code>","text":"<p>Abstract method for executing the video operation use case.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to create.</p> required <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>A video entity instance</p> <p>Raises:</p> Type Description <code>InvalidUrlError</code> <p>If the URL is invalid or a video with the same URL already exists.</p> Source code in <code>src/domain/use_cases/create.py</code> <pre><code>@abstractmethod\ndef execute(self, url: str) -&gt; VideoEntity:\n    \"\"\"Abstract method for executing the video operation use case.\n\n    Args:\n        url (str): The URL of the video to create.\n\n    Returns:\n        VideoEntity: A video entity instance\n\n    Raises:\n        InvalidUrlError: If the URL is invalid or a video with the same URL already exists.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/delete/","title":"Delete","text":""},{"location":"codigo/source/domain/use_cases/delete/#src.domain.use_cases.delete.AbstractDeleteVideoUseCase","title":"<code>AbstractDeleteVideoUseCase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for deleting a video by URL.</p> Source code in <code>src/domain/use_cases/delete.py</code> <pre><code>class AbstractDeleteVideoUseCase(ABC):\n    \"\"\"Abstract base class for deleting a video by URL.\"\"\"\n\n    @abstractmethod\n    def execute(self, id: str) -&gt; str:\n        \"\"\"Executes the use case to delete a video by its ID.\n\n        Args:\n            id (str): The ID of the video to delete.\n\n        Returns:\n            (str): A success message.\n\n        Raises:\n            Exception: If an error occurs during deletion.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/delete/#src.domain.use_cases.delete.AbstractDeleteVideoUseCase.execute","title":"<code>execute(id)</code>  <code>abstractmethod</code>","text":"<p>Executes the use case to delete a video by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the video to delete.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A success message.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If an error occurs during deletion.</p> Source code in <code>src/domain/use_cases/delete.py</code> <pre><code>@abstractmethod\ndef execute(self, id: str) -&gt; str:\n    \"\"\"Executes the use case to delete a video by its ID.\n\n    Args:\n        id (str): The ID of the video to delete.\n\n    Returns:\n        (str): A success message.\n\n    Raises:\n        Exception: If an error occurs during deletion.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/read_all/","title":"Read all","text":""},{"location":"codigo/source/domain/use_cases/read_all/#src.domain.use_cases.read_all.AbstractReadAllVideosUseCase","title":"<code>AbstractReadAllVideosUseCase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract use case for retrieving all videos.</p> <p>This class defines the blueprint for handling the retrieval of all video entities from the repository.</p> Source code in <code>src/domain/use_cases/read_all.py</code> <pre><code>class AbstractReadAllVideosUseCase(ABC):\n    \"\"\"Abstract use case for retrieving all videos.\n\n    This class defines the blueprint for handling the retrieval of all video entities from the repository.\n    \"\"\"\n\n    @abstractmethod\n    def execute(self) -&gt; List[VideoEntity]:\n        \"\"\"Abstract method for retrieving all videos.\n\n        This method should be implemented by subclasses to return a list of videos.\n\n        Returns:\n            (VideoNotFoundError): If no videos are found in the repository.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/read_all/#src.domain.use_cases.read_all.AbstractReadAllVideosUseCase.execute","title":"<code>execute()</code>  <code>abstractmethod</code>","text":"<p>Abstract method for retrieving all videos.</p> <p>This method should be implemented by subclasses to return a list of videos.</p> <p>Returns:</p> Type Description <code>VideoNotFoundError</code> <p>If no videos are found in the repository.</p> Source code in <code>src/domain/use_cases/read_all.py</code> <pre><code>@abstractmethod\ndef execute(self) -&gt; List[VideoEntity]:\n    \"\"\"Abstract method for retrieving all videos.\n\n    This method should be implemented by subclasses to return a list of videos.\n\n    Returns:\n        (VideoNotFoundError): If no videos are found in the repository.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/infrastructure/database/connection/","title":"Connection","text":""},{"location":"codigo/source/infrastructure/database/connection/#src.infrastructure.database.connection.get_db","title":"<code>get_db()</code>","text":"<p>Dependency that provides a database session for each request.</p> <p>This function manages the lifecycle of a database session. It opens a new session and ensures that the session is closed after the request is completed.</p> <p>Yields:</p> Type Description <code>SessionLocal</code> <p>The database session object.</p> Source code in <code>src/infrastructure/database/connection.py</code> <pre><code>def get_db():\n    \"\"\"\n    Dependency that provides a database session for each request.\n\n    This function manages the lifecycle of a database session. It opens a\n    new session and ensures that the session is closed after the request\n    is completed.\n\n    Yields:\n        (SessionLocal): The database session object.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"codigo/source/infrastructure/database/models/connection/","title":"Connection","text":""},{"location":"codigo/source/infrastructure/database/models/connection/#src.infrastructure.database.models.video.VideoModel","title":"<code>VideoModel</code>","text":"<p>               Bases: <code>Base</code></p> <p>A SQLAlchemy model representing the 'videos' table in the database.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>UUID</code> <p>Unique identifier for each video. It is automatically generated using UUID.</p> <code>url</code> <code>str</code> <p>The URL of the video, which must start with \"http\" or \"https\".</p> <code>created_at</code> <code>datetime</code> <p>Timestamp representing when the video record was created. Defaults to the current UTC time.</p> <code>updated_at</code> <code>datetime</code> <p>Timestamp representing when the video record was last updated. This can be null if no update has occurred.</p> <p>Methods:</p> Name Description <code>validate_url</code> <p>Validates that the URL follows the correct format (starting with \"http\" or \"https\"). Raises InvalidUrlError if the URL does not match the expected pattern.</p> Source code in <code>src/infrastructure/database/models/video.py</code> <pre><code>class VideoModel(Base):\n    \"\"\"\n    A SQLAlchemy model representing the 'videos' table in the database.\n\n    Attributes:\n        id (UUID): Unique identifier for each video. It is automatically generated using UUID.\n        url (str): The URL of the video, which must start with \"http\" or \"https\".\n        created_at (datetime): Timestamp representing when the video record was created. Defaults to the current UTC time.\n        updated_at (datetime): Timestamp representing when the video record was last updated. This can be null if no update has occurred.\n\n    Methods:\n        validate_url(key, url):\n            Validates that the URL follows the correct format (starting with \"http\" or \"https\").\n            Raises InvalidUrlError if the URL does not match the expected pattern.\n    \"\"\"\n\n    __tablename__ = \"videos\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    url = Column(String, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, nullable=True)\n\n    URL_REGEX = re.compile(r\"^(http|https)://\")\n\n    @validates(\"url\")\n    def validate_url(self, key, url):\n        \"\"\"\n        Validates the 'url' field to ensure it starts with \"http\" or \"https\".\n\n        Args:\n            key (str): The field name being validated (in this case, 'url').\n            url (str): The URL string to validate.\n\n        Returns:\n            (str): The validated URL if it matches the required pattern.\n\n        Raises:\n            InvalidUrlError: If the URL does not match the required \"http\" or \"https\" format.\n        \"\"\"\n        if not self.URL_REGEX.match(url):\n            raise InvalidUrlError(\n                message=ErrorMessagesEnum.INVALID_URL.value, name=\"InvalidUrl\"\n            )\n        return url\n</code></pre>"},{"location":"codigo/source/infrastructure/database/models/connection/#src.infrastructure.database.models.video.VideoModel.validate_url","title":"<code>validate_url(key, url)</code>","text":"<p>Validates the 'url' field to ensure it starts with \"http\" or \"https\".</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The field name being validated (in this case, 'url').</p> required <code>url</code> <code>str</code> <p>The URL string to validate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The validated URL if it matches the required pattern.</p> <p>Raises:</p> Type Description <code>InvalidUrlError</code> <p>If the URL does not match the required \"http\" or \"https\" format.</p> Source code in <code>src/infrastructure/database/models/video.py</code> <pre><code>@validates(\"url\")\ndef validate_url(self, key, url):\n    \"\"\"\n    Validates the 'url' field to ensure it starts with \"http\" or \"https\".\n\n    Args:\n        key (str): The field name being validated (in this case, 'url').\n        url (str): The URL string to validate.\n\n    Returns:\n        (str): The validated URL if it matches the required pattern.\n\n    Raises:\n        InvalidUrlError: If the URL does not match the required \"http\" or \"https\" format.\n    \"\"\"\n    if not self.URL_REGEX.match(url):\n        raise InvalidUrlError(\n            message=ErrorMessagesEnum.INVALID_URL.value, name=\"InvalidUrl\"\n        )\n    return url\n</code></pre>"},{"location":"codigo/source/infrastructure/mappers/video/","title":"Video","text":""},{"location":"codigo/source/infrastructure/mappers/video/#src.infrastructure.mappers.video.VideoMapper","title":"<code>VideoMapper</code>","text":"<p>A mapper class that converts between VideoEntity (domain) and VideoModel (infrastructure).</p> Source code in <code>src/infrastructure/mappers/video.py</code> <pre><code>class VideoMapper:\n    \"\"\"\n    A mapper class that converts between VideoEntity (domain) and VideoModel (infrastructure).\n    \"\"\"\n\n    @staticmethod\n    def to_entity(video_model: VideoModel) -&gt; VideoEntity:\n        \"\"\"\n        Converts a VideoModel instance into a VideoEntity.\n\n        Args:\n            video_model (VideoModel): The database model of the video.\n\n        Returns:\n            VideoEntity: The corresponding domain entity.\n        \"\"\"\n        return VideoEntity(\n            id=video_model.id,\n            url=video_model.url,\n            created_at=video_model.created_at,\n            updated_at=video_model.updated_at,\n        )\n\n    @staticmethod\n    def to_model(video_entity: VideoEntity) -&gt; VideoModel:\n        \"\"\"\n        Converts a VideoEntity instance into a VideoModel.\n\n        Args:\n            video_entity (VideoEntity): The domain entity of the video.\n\n        Returns:\n            VideoModel: The corresponding database model.\n        \"\"\"\n        return VideoModel(\n            id=video_entity.id,\n            url=video_entity.url,\n            created_at=video_entity.created_at,\n            updated_at=video_entity.updated_at,\n        )\n</code></pre>"},{"location":"codigo/source/infrastructure/mappers/video/#src.infrastructure.mappers.video.VideoMapper.to_entity","title":"<code>to_entity(video_model)</code>  <code>staticmethod</code>","text":"<p>Converts a VideoModel instance into a VideoEntity.</p> <p>Parameters:</p> Name Type Description Default <code>video_model</code> <code>VideoModel</code> <p>The database model of the video.</p> required <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>The corresponding domain entity.</p> Source code in <code>src/infrastructure/mappers/video.py</code> <pre><code>@staticmethod\ndef to_entity(video_model: VideoModel) -&gt; VideoEntity:\n    \"\"\"\n    Converts a VideoModel instance into a VideoEntity.\n\n    Args:\n        video_model (VideoModel): The database model of the video.\n\n    Returns:\n        VideoEntity: The corresponding domain entity.\n    \"\"\"\n    return VideoEntity(\n        id=video_model.id,\n        url=video_model.url,\n        created_at=video_model.created_at,\n        updated_at=video_model.updated_at,\n    )\n</code></pre>"},{"location":"codigo/source/infrastructure/mappers/video/#src.infrastructure.mappers.video.VideoMapper.to_model","title":"<code>to_model(video_entity)</code>  <code>staticmethod</code>","text":"<p>Converts a VideoEntity instance into a VideoModel.</p> <p>Parameters:</p> Name Type Description Default <code>video_entity</code> <code>VideoEntity</code> <p>The domain entity of the video.</p> required <p>Returns:</p> Name Type Description <code>VideoModel</code> <code>VideoModel</code> <p>The corresponding database model.</p> Source code in <code>src/infrastructure/mappers/video.py</code> <pre><code>@staticmethod\ndef to_model(video_entity: VideoEntity) -&gt; VideoModel:\n    \"\"\"\n    Converts a VideoEntity instance into a VideoModel.\n\n    Args:\n        video_entity (VideoEntity): The domain entity of the video.\n\n    Returns:\n        VideoModel: The corresponding database model.\n    \"\"\"\n    return VideoModel(\n        id=video_entity.id,\n        url=video_entity.url,\n        created_at=video_entity.created_at,\n        updated_at=video_entity.updated_at,\n    )\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/","title":"Video","text":""},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository","title":"<code>VideoRepository</code>","text":"<p>               Bases: <code>AbstractVideoRepository</code></p> <p>Concrete implementation of the AbstractVideoRepository using SQLAlchemy.</p> <p>This repository is responsible for managing video data in the database.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>class VideoRepository(AbstractVideoRepository):\n    \"\"\"\n    Concrete implementation of the AbstractVideoRepository using SQLAlchemy.\n\n    This repository is responsible for managing video data in the database.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initializes the repository with a SQLAlchemy session.\n\n        Args:\n            session (Session): The SQLAlchemy session used for database interactions.\n        \"\"\"\n        self.session = session\n\n    def create(self, video: VideoEntity) -&gt; VideoEntity:\n        \"\"\"\n        Creates a new video in the database.\n\n        Args:\n            video (VideoEntity): The video entity to create.\n\n        Returns:\n            VideoEntity: The created video entity.\n        \"\"\"\n        video_model = VideoMapper.to_model(video)\n        self.session.add(video_model)\n        self.session.commit()\n        self.session.refresh(\n            video_model\n        )  # Refresh to get the updated fields like 'id'\n        return VideoMapper.to_entity(video_model)\n\n    def find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n        \"\"\"\n        Finds a video by its URL in the database.\n\n        Args:\n            url (str): The URL of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        video_model = self.session.query(VideoModel).filter_by(url=url).first()\n        if video_model:\n            return VideoMapper.to_entity(video_model)\n        return None\n\n    def find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n        \"\"\"\n        Finds a video by its Id in the database.\n\n        Args:\n            id (str): The Id of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        video_model = self.session.query(VideoModel).filter_by(id=id).first()\n        if video_model:\n            return VideoMapper.to_entity(video_model)\n        return None\n\n    def find_all(self) -&gt; List[VideoEntity]:\n        \"\"\"\n        Retrieves all video entities from the database.\n\n        Returns:\n            List[VideoEntity]: A list of all video entities.\n        \"\"\"\n        video_models = self.session.query(VideoModel).all()\n        return [\n            VideoMapper.to_entity(video_model) for video_model in video_models\n        ]\n\n    def delete(self, video: VideoEntity) -&gt; None:\n        \"\"\"\n        Deletes a video from the database.\n\n        Args:\n            video (VideoEntity): The video entity to delete.\n        \"\"\"\n        video_model = (\n            self.session.query(VideoModel).filter_by(id=video.id).first()\n        )\n        if video_model:\n            self.session.delete(video_model)\n            self.session.commit()\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.__init__","title":"<code>__init__(session)</code>","text":"<p>Initializes the repository with a SQLAlchemy session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The SQLAlchemy session used for database interactions.</p> required Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def __init__(self, session: Session):\n    \"\"\"\n    Initializes the repository with a SQLAlchemy session.\n\n    Args:\n        session (Session): The SQLAlchemy session used for database interactions.\n    \"\"\"\n    self.session = session\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.create","title":"<code>create(video)</code>","text":"<p>Creates a new video in the database.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to create.</p> required <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>The created video entity.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def create(self, video: VideoEntity) -&gt; VideoEntity:\n    \"\"\"\n    Creates a new video in the database.\n\n    Args:\n        video (VideoEntity): The video entity to create.\n\n    Returns:\n        VideoEntity: The created video entity.\n    \"\"\"\n    video_model = VideoMapper.to_model(video)\n    self.session.add(video_model)\n    self.session.commit()\n    self.session.refresh(\n        video_model\n    )  # Refresh to get the updated fields like 'id'\n    return VideoMapper.to_entity(video_model)\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.delete","title":"<code>delete(video)</code>","text":"<p>Deletes a video from the database.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to delete.</p> required Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def delete(self, video: VideoEntity) -&gt; None:\n    \"\"\"\n    Deletes a video from the database.\n\n    Args:\n        video (VideoEntity): The video entity to delete.\n    \"\"\"\n    video_model = (\n        self.session.query(VideoModel).filter_by(id=video.id).first()\n    )\n    if video_model:\n        self.session.delete(video_model)\n        self.session.commit()\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.find_all","title":"<code>find_all()</code>","text":"<p>Retrieves all video entities from the database.</p> <p>Returns:</p> Type Description <code>List[VideoEntity]</code> <p>List[VideoEntity]: A list of all video entities.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def find_all(self) -&gt; List[VideoEntity]:\n    \"\"\"\n    Retrieves all video entities from the database.\n\n    Returns:\n        List[VideoEntity]: A list of all video entities.\n    \"\"\"\n    video_models = self.session.query(VideoModel).all()\n    return [\n        VideoMapper.to_entity(video_model) for video_model in video_models\n    ]\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.find_by_id","title":"<code>find_by_id(id)</code>","text":"<p>Finds a video by its Id in the database.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Id of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n    \"\"\"\n    Finds a video by its Id in the database.\n\n    Args:\n        id (str): The Id of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    video_model = self.session.query(VideoModel).filter_by(id=id).first()\n    if video_model:\n        return VideoMapper.to_entity(video_model)\n    return None\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.find_by_url","title":"<code>find_by_url(url)</code>","text":"<p>Finds a video by its URL in the database.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n    \"\"\"\n    Finds a video by its URL in the database.\n\n    Args:\n        url (str): The URL of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    video_model = self.session.query(VideoModel).filter_by(url=url).first()\n    if video_model:\n        return VideoMapper.to_entity(video_model)\n    return None\n</code></pre>"},{"location":"codigo/source/presentation/handlers/exception_handlers/","title":"Exception handlers","text":""},{"location":"codigo/source/presentation/handlers/exception_handlers/#src.presentation.handlers.exception_handlers.create_exception_handler","title":"<code>create_exception_handler(status_code, initial_detail)</code>","text":"<p>Creates a custom exception handler for FastAPI.</p> <p>This function generates a handler that manages exceptions by returning a JSON response with a custom error message and status code. It is designed for handling specific validation errors in video operations.</p> <p>Parameters:</p> Name Type Description Default <code>status_code</code> <code>int</code> <p>The HTTP status code to return with the exception response.</p> required <code>initial_detail</code> <code>str</code> <p>The initial error message to include in the response.</p> required <p>Returns:</p> Type Description <code>Callable[[Request, VideoValidationError], JSONResponse]</code> <p>Callable[[Request, VideoValidationError], JSONResponse]: A custom exception handler</p> <code>Callable[[Request, VideoValidationError], JSONResponse]</code> <p>function that returns a JSONResponse with the provided status code and error message.</p> Source code in <code>src/presentation/handlers/exception_handlers.py</code> <pre><code>def create_exception_handler(\n    status_code: int, initial_detail: str\n) -&gt; Callable[[Request, VideoValidationError], JSONResponse]:\n    \"\"\"\n    Creates a custom exception handler for FastAPI.\n\n    This function generates a handler that manages exceptions by returning\n    a JSON response with a custom error message and status code. It is designed\n    for handling specific validation errors in video operations.\n\n    Args:\n        status_code (int): The HTTP status code to return with the exception response.\n        initial_detail (str): The initial error message to include in the response.\n\n    Returns:\n        Callable[[Request, VideoValidationError], JSONResponse]: A custom exception handler\n        function that returns a JSONResponse with the provided status code and error message.\n    \"\"\"\n    detail = {\"message\": initial_detail}\n\n    async def exception_handler(\n        _: Request, exc: VideoValidationError\n    ) -&gt; JSONResponse:\n        \"\"\"\n        Handles the actual exception by returning a JSON response with the relevant error message.\n\n        Args:\n            _: The incoming request (not used in the function but required by FastAPI).\n            exc (VideoValidationError): The exception that was raised during validation.\n\n        Returns:\n            JSONResponse: The response containing the error message and status code.\n        \"\"\"\n        if exc.message:\n            detail[\"message\"] = exc.message\n\n        if exc.name:\n            detail[\"message\"] = f\"{detail['message']}\"\n\n        return JSONResponse(\n            status_code=status_code, content={\"detail\": detail[\"message\"]}\n        )\n\n    return exception_handler\n</code></pre>"},{"location":"codigo/source/presentation/handlers/exception_handlers/#src.presentation.handlers.exception_handlers.register_exception_handlers","title":"<code>register_exception_handlers(app)</code>","text":"<p>Registers custom exception handlers to the FastAPI application.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>FastAPI</code> <p>The FastAPI application instance.</p> required Source code in <code>src/presentation/handlers/exception_handlers.py</code> <pre><code>def register_exception_handlers(app: FastAPI):\n    \"\"\"\n    Registers custom exception handlers to the FastAPI application.\n\n    Args:\n        app (FastAPI): The FastAPI application instance.\n    \"\"\"\n    app.add_exception_handler(\n        exc_class_or_status_code=DuplicateUrlError,\n        handler=create_exception_handler(\n            status.HTTP_400_BAD_REQUEST, ErrorMessagesEnum.DUPLICATE_URL.value\n        ),\n    )\n    app.add_exception_handler(\n        exc_class_or_status_code=InvalidUrlError,\n        handler=create_exception_handler(\n            status.HTTP_400_BAD_REQUEST, ErrorMessagesEnum.INVALID_URL.value\n        ),\n    )\n    app.add_exception_handler(\n        exc_class_or_status_code=VideoNotFoundError,\n        handler=create_exception_handler(\n            status.HTTP_404_NOT_FOUND, ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n        ),\n    )\n</code></pre>"},{"location":"codigo/source/presentation/routers/video/","title":"Video","text":""},{"location":"codigo/source/presentation/routers/video/#src.presentation.routers.video.create_video","title":"<code>create_video(video, db=Depends(get_db))</code>","text":"<p>Creates a new video entry in the database.</p> <p>This endpoint allows the user to create a new video by providing the necessary details in the request body. The video information will be stored in the database, and a success message is returned.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>CreateVideoSchema</code> <p>The schema that contains the video data, including title, description, duration, and url.</p> required <code>db</code> <code>Session</code> <p>The database session dependency, provided by FastAPI's Depends.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <code>dict</code> <p>A response containing a success message and the created video's URL in the data field.</p> Example <p>Response: {     \"message\": \"Video created successfully\",     \"data\": {         \"url\": \"https://www.example.com/video\"     } }</p> Source code in <code>src/presentation/routers/video.py</code> <pre><code>@router.post(\n    \"/\",\n    status_code=status.HTTP_201_CREATED,\n    summary=\"Create a new video\",\n    description=\"Create a new video with the provided data in the request body.\",\n    response_model=SuccessMessageSchema,\n)\ndef create_video(video: CreateVideoSchema, db: Session = Depends(get_db)):\n    \"\"\"\n    Creates a new video entry in the database.\n\n    This endpoint allows the user to create a new video by providing\n    the necessary details in the request body. The video information\n    will be stored in the database, and a success message is returned.\n\n    Args:\n        video (CreateVideoSchema): The schema that contains the video data, including title, description, duration, and url.\n        db (Session, optional): The database session dependency, provided by FastAPI's Depends.\n\n    Returns:\n        (dict): A response containing a success message and the created video's URL in the data field.\n\n    Example:\n        Response:\n        {\n            \"message\": \"Video created successfully\",\n            \"data\": {\n                \"url\": \"https://www.example.com/video\"\n            }\n        }\n    \"\"\"\n    repository = VideoRepository(session=db)\n    use_case = CreateVideoUseCase(video_repository=repository)\n    created_video = use_case.execute(video.url)\n    response_data = SuccessMessageSchema(\n        message=SuccessMessagesEnum.VIDEO_CREATED_SUCCESS.value,\n        data={\"id\": created_video.id, \"url\": created_video.url},\n    )\n    return response_data\n</code></pre>"},{"location":"codigo/source/presentation/routers/video/#src.presentation.routers.video.delete_video","title":"<code>delete_video(video_id, db=Depends(get_db))</code>","text":"<p>Deletes a video entry from the database.</p> <p>This endpoint allows the user to delete a video by providing the unique video ID in the request path. If the video is successfully deleted, a 204 No Content response is returned.</p> <p>Parameters:</p> Name Type Description Default <code>video_id</code> <code>str</code> <p>The unique identifier of the video to be deleted.</p> required <code>db</code> <code>Session</code> <p>The database session dependency, provided by FastAPI's Depends.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <code>None</code> <p>A response with no content (204).</p> Source code in <code>src/presentation/routers/video.py</code> <pre><code>@router.delete(\n    \"/{video_id}\",\n    status_code=status.HTTP_204_NO_CONTENT,\n    summary=\"Delete a video\",\n    description=\"Delete a video from the database by its ID.\",\n)\ndef delete_video(video_id: UUID, db: Session = Depends(get_db)):\n    \"\"\"\n    Deletes a video entry from the database.\n\n    This endpoint allows the user to delete a video by providing\n    the unique video ID in the request path. If the video is\n    successfully deleted, a 204 No Content response is returned.\n\n    Args:\n        video_id (str): The unique identifier of the video to be deleted.\n        db (Session, optional): The database session dependency, provided by FastAPI's Depends.\n\n    Returns:\n        (None): A response with no content (204).\n    \"\"\"\n    repository = VideoRepository(session=db)\n    use_case = DeleteVideoUseCase(video_repository=repository)\n    use_case.execute(id=video_id)\n\n    return None\n</code></pre>"},{"location":"codigo/source/presentation/routers/video/#src.presentation.routers.video.read_all_videos","title":"<code>read_all_videos(db=Depends(get_db))</code>","text":"<p>Retrieves all videos from the database.</p> <p>This endpoint fetches all videos stored in the database and returns only the 'id' and 'url' fields of each video in the response data.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>The database session dependency, provided by FastAPI's Depends.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <code>dict</code> <p>A response containing a success message and a list of video objects with 'id' and 'url' fields.</p> Source code in <code>src/presentation/routers/video.py</code> <pre><code>@router.get(\n    \"/\",\n    status_code=status.HTTP_200_OK,\n    summary=\"Read all videos\",\n    description=\"Retrieve all videos from the database.\",\n    response_model=SuccessMessageSchema,\n)\ndef read_all_videos(db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieves all videos from the database.\n\n    This endpoint fetches all videos stored in the database and returns\n    only the 'id' and 'url' fields of each video in the response data.\n\n    Args:\n        db (Session, optional): The database session dependency, provided by FastAPI's Depends.\n\n    Returns:\n        (dict): A response containing a success message and a list of video objects with 'id' and 'url' fields.\n    \"\"\"\n    repository = VideoRepository(session=db)\n    use_case = ReadAllVideosUseCase(video_repository=repository)\n    videos = use_case.execute()\n    videos_data = [{\"id\": video.id, \"url\": video.url} for video in videos]\n    response_data = SuccessMessageSchema(\n        message=SuccessMessagesEnum.VIDEOS_LISTED_SUCCESS.value,\n        data=videos_data,\n    )\n\n    return response_data\n</code></pre>"},{"location":"codigo/source/presentation/schemas/create_video/","title":"Create video","text":""},{"location":"codigo/source/presentation/schemas/create_video/#src.presentation.schemas.create_video.CreateVideoSchema","title":"<code>CreateVideoSchema</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for creating a new video.</p> <p>This schema defines the structure of the request body required to create a new video. It expects a URL of the video that will be stored in the database.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>The URL of the video that is being created. Must be a valid string.</p> Source code in <code>src/presentation/schemas/create_video.py</code> <pre><code>class CreateVideoSchema(BaseModel):\n    \"\"\"\n    Schema for creating a new video.\n\n    This schema defines the structure of the request body required to create\n    a new video. It expects a URL of the video that will be stored in the database.\n\n    Attributes:\n        url (str): The URL of the video that is being created. Must be a valid string.\n    \"\"\"\n\n    url: str = Field(..., description=\"Video URL\")\n</code></pre>"},{"location":"codigo/source/presentation/schemas/success_message/","title":"Success message","text":""},{"location":"codigo/source/presentation/schemas/success_message/#src.presentation.schemas.success_message.SuccessMessageSchema","title":"<code>SuccessMessageSchema</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for a success response message.</p> <p>This schema defines the structure of the response returned upon successful execution of a request. It includes a mandatory success message and optional data containing additional information related to the operation.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>A required field containing the success message.</p> <code>data</code> <code>Optional[Any]</code> <p>Optional additional data that can provide extra details                   related to the operation. The structure of <code>data</code> is flexible.</p> Source code in <code>src/presentation/schemas/success_message.py</code> <pre><code>class SuccessMessageSchema(BaseModel):\n    \"\"\"\n    Schema for a success response message.\n\n    This schema defines the structure of the response returned upon successful\n    execution of a request. It includes a mandatory success message and optional\n    data containing additional information related to the operation.\n\n    Attributes:\n        message (str): A required field containing the success message.\n        data (Optional[Any]): Optional additional data that can provide extra details\n                              related to the operation. The structure of `data` is flexible.\n    \"\"\"\n\n    message: str = Field(..., description=\"Success message\")\n    data: Optional[Any] = Field(\n        None, description=\"Optional data related to the success message\"\n    )\n</code></pre>"},{"location":"codigo/tests/e2e/create_video/","title":"Create video","text":""},{"location":"codigo/tests/e2e/create_video/#tests.e2e.test_create_video.TestCreateVideo","title":"<code>TestCreateVideo</code>","text":"<p>End-to-end tests for the video creation feature in the FastAPI application.</p> <p>This class contains test cases to verify the behavior of the video creation endpoint. It ensures that the API correctly handles the creation of a new video and returns the expected response when provided with valid data.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>TestClient</code> <p>A FastAPI test client used for making                  requests to the API.</p> Source code in <code>tests/e2e/test_create_video.py</code> <pre><code>@pytest.mark.e2e\nclass TestCreateVideo:\n    \"\"\"\n    End-to-end tests for the video creation feature in the FastAPI application.\n\n    This class contains test cases to verify the behavior of the\n    video creation endpoint. It ensures that the API correctly\n    handles the creation of a new video and returns the expected\n    response when provided with valid data.\n\n    Attributes:\n        client (TestClient): A FastAPI test client used for making\n                             requests to the API.\n    \"\"\"\n\n    def test_create_video(self, client: TestClient):\n        \"\"\"\n        Test the creation of a video via the API.\n\n        This test sends a POST request to the /api/videos/ endpoint\n        with a valid video payload. It checks that the response status\n        code is 201 (Created) and verifies that the response message\n        and data are as expected.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending\n                                 requests.\n        \"\"\"\n        video_data = CreateVideoSchema(url=\"https://www.example.com/video\")\n\n        response = client.post(\"api/videos/\", json=video_data.model_dump())\n\n        assert response.status_code == status.HTTP_201_CREATED\n\n        response_data = response.json()\n        assert (\n            response_data[\"message\"]\n            == SuccessMessagesEnum.VIDEO_CREATED_SUCCESS.value\n        )\n        assert response_data[\"data\"][\"url\"] == video_data.url\n\n    def test_create_duplicate_video(self, client: TestClient):\n        \"\"\"\n        Test the creation of a duplicate video via the API.\n\n        This test attempts to create a video with a URL that\n        already exists in the database. It checks that a\n        DuplicateUrlError is raised.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending\n                                requests.\n        \"\"\"\n        video_data = CreateVideoSchema(url=\"https://www.example.com/video\")\n\n        response = client.post(\"api/videos/\", json=video_data.model_dump())\n\n        assert response.status_code == status.HTTP_201_CREATED\n\n        duplicate_response = client.post(\n            \"api/videos/\", json=video_data.model_dump()\n        )\n\n        assert duplicate_response.status_code == status.HTTP_400_BAD_REQUEST\n        assert (\n            duplicate_response.json()[\"detail\"]\n            == ErrorMessagesEnum.DUPLICATE_URL.value\n        )\n\n    def test_create_video_invalid_url(self, client: TestClient):\n        \"\"\"\n        Test the creation of a video with an invalid URL via the API.\n\n        This test attempts to create a video with a malformed URL. It\n        checks that the API returns an error indicating that the URL\n        is invalid.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending\n                                 requests.\n        \"\"\"\n        video_data = CreateVideoSchema(url=\"invalid-url\")\n\n        response = client.post(\"/api/videos/\", json=video_data.model_dump())\n\n        assert response.status_code == status.HTTP_400_BAD_REQUEST\n\n        assert response.json()[\"detail\"] == ErrorMessagesEnum.INVALID_URL.value\n\n    def test_create_video_without_url(self, client: TestClient):\n        \"\"\"\n        Test the creation of a video without a URL via the API.\n\n        This test attempts to create a video with a missing URL. It\n        checks that the API returns an error indicating that the URL\n        is required.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending\n                                 requests.\n        \"\"\"\n\n        response = client.post(\"/api/videos/\", json={})\n\n        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n</code></pre>"},{"location":"codigo/tests/e2e/create_video/#tests.e2e.test_create_video.TestCreateVideo.test_create_duplicate_video","title":"<code>test_create_duplicate_video(client)</code>","text":"<p>Test the creation of a duplicate video via the API.</p> <p>This test attempts to create a video with a URL that already exists in the database. It checks that a DuplicateUrlError is raised.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending                 requests.</p> required Source code in <code>tests/e2e/test_create_video.py</code> <pre><code>def test_create_duplicate_video(self, client: TestClient):\n    \"\"\"\n    Test the creation of a duplicate video via the API.\n\n    This test attempts to create a video with a URL that\n    already exists in the database. It checks that a\n    DuplicateUrlError is raised.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending\n                            requests.\n    \"\"\"\n    video_data = CreateVideoSchema(url=\"https://www.example.com/video\")\n\n    response = client.post(\"api/videos/\", json=video_data.model_dump())\n\n    assert response.status_code == status.HTTP_201_CREATED\n\n    duplicate_response = client.post(\n        \"api/videos/\", json=video_data.model_dump()\n    )\n\n    assert duplicate_response.status_code == status.HTTP_400_BAD_REQUEST\n    assert (\n        duplicate_response.json()[\"detail\"]\n        == ErrorMessagesEnum.DUPLICATE_URL.value\n    )\n</code></pre>"},{"location":"codigo/tests/e2e/create_video/#tests.e2e.test_create_video.TestCreateVideo.test_create_video","title":"<code>test_create_video(client)</code>","text":"<p>Test the creation of a video via the API.</p> <p>This test sends a POST request to the /api/videos/ endpoint with a valid video payload. It checks that the response status code is 201 (Created) and verifies that the response message and data are as expected.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending                  requests.</p> required Source code in <code>tests/e2e/test_create_video.py</code> <pre><code>def test_create_video(self, client: TestClient):\n    \"\"\"\n    Test the creation of a video via the API.\n\n    This test sends a POST request to the /api/videos/ endpoint\n    with a valid video payload. It checks that the response status\n    code is 201 (Created) and verifies that the response message\n    and data are as expected.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending\n                             requests.\n    \"\"\"\n    video_data = CreateVideoSchema(url=\"https://www.example.com/video\")\n\n    response = client.post(\"api/videos/\", json=video_data.model_dump())\n\n    assert response.status_code == status.HTTP_201_CREATED\n\n    response_data = response.json()\n    assert (\n        response_data[\"message\"]\n        == SuccessMessagesEnum.VIDEO_CREATED_SUCCESS.value\n    )\n    assert response_data[\"data\"][\"url\"] == video_data.url\n</code></pre>"},{"location":"codigo/tests/e2e/create_video/#tests.e2e.test_create_video.TestCreateVideo.test_create_video_invalid_url","title":"<code>test_create_video_invalid_url(client)</code>","text":"<p>Test the creation of a video with an invalid URL via the API.</p> <p>This test attempts to create a video with a malformed URL. It checks that the API returns an error indicating that the URL is invalid.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending                  requests.</p> required Source code in <code>tests/e2e/test_create_video.py</code> <pre><code>def test_create_video_invalid_url(self, client: TestClient):\n    \"\"\"\n    Test the creation of a video with an invalid URL via the API.\n\n    This test attempts to create a video with a malformed URL. It\n    checks that the API returns an error indicating that the URL\n    is invalid.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending\n                             requests.\n    \"\"\"\n    video_data = CreateVideoSchema(url=\"invalid-url\")\n\n    response = client.post(\"/api/videos/\", json=video_data.model_dump())\n\n    assert response.status_code == status.HTTP_400_BAD_REQUEST\n\n    assert response.json()[\"detail\"] == ErrorMessagesEnum.INVALID_URL.value\n</code></pre>"},{"location":"codigo/tests/e2e/create_video/#tests.e2e.test_create_video.TestCreateVideo.test_create_video_without_url","title":"<code>test_create_video_without_url(client)</code>","text":"<p>Test the creation of a video without a URL via the API.</p> <p>This test attempts to create a video with a missing URL. It checks that the API returns an error indicating that the URL is required.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending                  requests.</p> required Source code in <code>tests/e2e/test_create_video.py</code> <pre><code>def test_create_video_without_url(self, client: TestClient):\n    \"\"\"\n    Test the creation of a video without a URL via the API.\n\n    This test attempts to create a video with a missing URL. It\n    checks that the API returns an error indicating that the URL\n    is required.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending\n                             requests.\n    \"\"\"\n\n    response = client.post(\"/api/videos/\", json={})\n\n    assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n</code></pre>"},{"location":"codigo/tests/e2e/test_delete_video/","title":"Test delete video","text":""},{"location":"codigo/tests/e2e/test_delete_video/#tests.e2e.test_delete_video.TestDeleteVideo","title":"<code>TestDeleteVideo</code>","text":"<p>End-to-end tests for the video deletion feature in the FastAPI application.</p> <p>This class contains test cases to verify the behavior of the video deletion endpoint.</p> Source code in <code>tests/e2e/test_delete_video.py</code> <pre><code>@pytest.mark.e2e\nclass TestDeleteVideo:\n    \"\"\"\n    End-to-end tests for the video deletion feature in the FastAPI application.\n\n    This class contains test cases to verify the behavior of the\n    video deletion endpoint.\n    \"\"\"\n\n    def test_delete_video_success(self, client: TestClient):\n        \"\"\"\n        Test the successful deletion of a video via the API.\n\n        This test attempts to delete a video with a valid ID. It\n        checks that the response status code is 204 (No Content)\n        and verifies that no response body is returned.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending\n                                 requests.\n        \"\"\"\n        video_data = {\"url\": \"https://www.example.com/video-to-delete\"}\n        create_response = client.post(\"/api/videos/\", json=video_data)\n        assert create_response.status_code == status.HTTP_201_CREATED\n        video_id = create_response.json()[\"data\"][\"id\"]\n\n        delete_response = client.delete(f\"/api/videos/{video_id}\")\n        assert delete_response.status_code == status.HTTP_204_NO_CONTENT\n\n    def test_delete_video_not_found(self, client: TestClient):\n        \"\"\"\n        Test the deletion of a non-existent video via the API.\n\n        This test attempts to delete a video with an ID that does not\n        exist in the database. It checks that the API returns a\n        404 Not Found status code.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending\n                                 requests.\n        \"\"\"\n        invalid_video_id = \"123e4567-e89b-12d3-a456-426614174000\"\n        delete_response = client.delete(f\"/api/videos/{invalid_video_id}\")\n\n        assert delete_response.status_code == status.HTTP_404_NOT_FOUND\n        assert (\n            delete_response.json()[\"detail\"]\n            == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n        )\n\n    def test_delete_video_invalid_uuid(self, client: TestClient):\n        \"\"\"\n        Test deletion of a video with an invalid UUID format via the API.\n\n        This test attempts to delete a video using an invalid UUID\n        (e.g., a string that doesn't conform to UUID standards). It\n        checks that the API returns a 400 Bad Request status code\n        with an appropriate error message.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending\n                                 requests.\n        \"\"\"\n        invalid_video_id = \"invalid-uuid-format\"\n        delete_response = client.delete(f\"/api/videos/{invalid_video_id}\")\n\n        assert (\n            delete_response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n        )\n</code></pre>"},{"location":"codigo/tests/e2e/test_delete_video/#tests.e2e.test_delete_video.TestDeleteVideo.test_delete_video_invalid_uuid","title":"<code>test_delete_video_invalid_uuid(client)</code>","text":"<p>Test deletion of a video with an invalid UUID format via the API.</p> <p>This test attempts to delete a video using an invalid UUID (e.g., a string that doesn't conform to UUID standards). It checks that the API returns a 400 Bad Request status code with an appropriate error message.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending                  requests.</p> required Source code in <code>tests/e2e/test_delete_video.py</code> <pre><code>def test_delete_video_invalid_uuid(self, client: TestClient):\n    \"\"\"\n    Test deletion of a video with an invalid UUID format via the API.\n\n    This test attempts to delete a video using an invalid UUID\n    (e.g., a string that doesn't conform to UUID standards). It\n    checks that the API returns a 400 Bad Request status code\n    with an appropriate error message.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending\n                             requests.\n    \"\"\"\n    invalid_video_id = \"invalid-uuid-format\"\n    delete_response = client.delete(f\"/api/videos/{invalid_video_id}\")\n\n    assert (\n        delete_response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n    )\n</code></pre>"},{"location":"codigo/tests/e2e/test_delete_video/#tests.e2e.test_delete_video.TestDeleteVideo.test_delete_video_not_found","title":"<code>test_delete_video_not_found(client)</code>","text":"<p>Test the deletion of a non-existent video via the API.</p> <p>This test attempts to delete a video with an ID that does not exist in the database. It checks that the API returns a 404 Not Found status code.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending                  requests.</p> required Source code in <code>tests/e2e/test_delete_video.py</code> <pre><code>def test_delete_video_not_found(self, client: TestClient):\n    \"\"\"\n    Test the deletion of a non-existent video via the API.\n\n    This test attempts to delete a video with an ID that does not\n    exist in the database. It checks that the API returns a\n    404 Not Found status code.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending\n                             requests.\n    \"\"\"\n    invalid_video_id = \"123e4567-e89b-12d3-a456-426614174000\"\n    delete_response = client.delete(f\"/api/videos/{invalid_video_id}\")\n\n    assert delete_response.status_code == status.HTTP_404_NOT_FOUND\n    assert (\n        delete_response.json()[\"detail\"]\n        == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n    )\n</code></pre>"},{"location":"codigo/tests/e2e/test_delete_video/#tests.e2e.test_delete_video.TestDeleteVideo.test_delete_video_success","title":"<code>test_delete_video_success(client)</code>","text":"<p>Test the successful deletion of a video via the API.</p> <p>This test attempts to delete a video with a valid ID. It checks that the response status code is 204 (No Content) and verifies that no response body is returned.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending                  requests.</p> required Source code in <code>tests/e2e/test_delete_video.py</code> <pre><code>def test_delete_video_success(self, client: TestClient):\n    \"\"\"\n    Test the successful deletion of a video via the API.\n\n    This test attempts to delete a video with a valid ID. It\n    checks that the response status code is 204 (No Content)\n    and verifies that no response body is returned.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending\n                             requests.\n    \"\"\"\n    video_data = {\"url\": \"https://www.example.com/video-to-delete\"}\n    create_response = client.post(\"/api/videos/\", json=video_data)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    video_id = create_response.json()[\"data\"][\"id\"]\n\n    delete_response = client.delete(f\"/api/videos/{video_id}\")\n    assert delete_response.status_code == status.HTTP_204_NO_CONTENT\n</code></pre>"},{"location":"codigo/tests/e2e/test_read_all/","title":"Test read all","text":""},{"location":"codigo/tests/e2e/test_read_all/#tests.e2e.test_read_all.TestReadAllVideos","title":"<code>TestReadAllVideos</code>","text":"<p>End-to-end tests for reading all videos via the API.</p> <p>This class contains test cases to verify the behavior of the video retrieval endpoint.</p> Source code in <code>tests/e2e/test_read_all.py</code> <pre><code>@pytest.mark.e2e\nclass TestReadAllVideos:\n    \"\"\"\n    End-to-end tests for reading all videos via the API.\n\n    This class contains test cases to verify the behavior of the\n    video retrieval endpoint.\n    \"\"\"\n\n    def test_read_all_videos_success(self, client: TestClient):\n        \"\"\"\n        Test the successful retrieval of all videos.\n\n        This test simulates the scenario where videos are present in the database,\n        and the API returns their 'id' and 'url' fields.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending requests.\n        \"\"\"\n        video_data_1 = CreateVideoSchema(url=\"https://www.example.com/video1\")\n        video_data_2 = CreateVideoSchema(url=\"https://www.example.com/video2\")\n        client.post(\"/api/videos/\", json=video_data_1.model_dump())\n        client.post(\"/api/videos/\", json=video_data_2.model_dump())\n\n        response = client.get(\"/api/videos/\")\n        assert response.status_code == status.HTTP_200_OK\n        response_json = response.json()\n\n        assert (\n            response_json[\"message\"]\n            == SuccessMessagesEnum.VIDEOS_LISTED_SUCCESS.value\n        )\n        assert len(response_json[\"data\"]) == 2\n        assert \"id\" in response_json[\"data\"][0]\n        assert \"url\" in response_json[\"data\"][0]\n\n    def test_read_all_videos_empty(self, client: TestClient):\n        \"\"\"\n        Test the retrieval of an empty list of videos.\n\n        Args:\n            client (TestClient): The FastAPI test client for sending requests.\n        \"\"\"\n        response = client.get(\"/api/videos/\")\n\n        assert response.status_code == status.HTTP_404_NOT_FOUND\n        response_json = response.json()\n\n        assert (\n            response_json[\"detail\"] == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n        )\n</code></pre>"},{"location":"codigo/tests/e2e/test_read_all/#tests.e2e.test_read_all.TestReadAllVideos.test_read_all_videos_empty","title":"<code>test_read_all_videos_empty(client)</code>","text":"<p>Test the retrieval of an empty list of videos.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending requests.</p> required Source code in <code>tests/e2e/test_read_all.py</code> <pre><code>def test_read_all_videos_empty(self, client: TestClient):\n    \"\"\"\n    Test the retrieval of an empty list of videos.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending requests.\n    \"\"\"\n    response = client.get(\"/api/videos/\")\n\n    assert response.status_code == status.HTTP_404_NOT_FOUND\n    response_json = response.json()\n\n    assert (\n        response_json[\"detail\"] == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n    )\n</code></pre>"},{"location":"codigo/tests/e2e/test_read_all/#tests.e2e.test_read_all.TestReadAllVideos.test_read_all_videos_success","title":"<code>test_read_all_videos_success(client)</code>","text":"<p>Test the successful retrieval of all videos.</p> <p>This test simulates the scenario where videos are present in the database, and the API returns their 'id' and 'url' fields.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>TestClient</code> <p>The FastAPI test client for sending requests.</p> required Source code in <code>tests/e2e/test_read_all.py</code> <pre><code>def test_read_all_videos_success(self, client: TestClient):\n    \"\"\"\n    Test the successful retrieval of all videos.\n\n    This test simulates the scenario where videos are present in the database,\n    and the API returns their 'id' and 'url' fields.\n\n    Args:\n        client (TestClient): The FastAPI test client for sending requests.\n    \"\"\"\n    video_data_1 = CreateVideoSchema(url=\"https://www.example.com/video1\")\n    video_data_2 = CreateVideoSchema(url=\"https://www.example.com/video2\")\n    client.post(\"/api/videos/\", json=video_data_1.model_dump())\n    client.post(\"/api/videos/\", json=video_data_2.model_dump())\n\n    response = client.get(\"/api/videos/\")\n    assert response.status_code == status.HTTP_200_OK\n    response_json = response.json()\n\n    assert (\n        response_json[\"message\"]\n        == SuccessMessagesEnum.VIDEOS_LISTED_SUCCESS.value\n    )\n    assert len(response_json[\"data\"]) == 2\n    assert \"id\" in response_json[\"data\"][0]\n    assert \"url\" in response_json[\"data\"][0]\n</code></pre>"},{"location":"codigo/tests/integration/repositories/test_video/","title":"Test video","text":""},{"location":"codigo/tests/integration/repositories/test_video/#tests.integration.repositories.test_video.TestVideoRepository","title":"<code>TestVideoRepository</code>","text":"<p>Integration tests for the VideoRepository.</p> Source code in <code>tests/integration/repositories/test_video.py</code> <pre><code>@pytest.mark.integration\nclass TestVideoRepository:\n    \"\"\"\n    Integration tests for the VideoRepository.\n    \"\"\"\n\n    def test_create_video(self, video_repository):\n        \"\"\"\n        Tests the creation of a video in the database.\n        \"\"\"\n        video = VideoFactory.create(url=\"https://example.com/video1\")\n        created_video = video_repository.create(video)\n\n        assert created_video.id is not None\n        assert created_video.url == \"https://example.com/video1\"\n        assert created_video.created_at is not None\n\n    def test_find_by_url(self, video_repository):\n        \"\"\"\n        Tests the retrieval of a video by URL in the database.\n        \"\"\"\n        video = VideoFactory.create(url=\"https://example.com/video2\")\n        video_repository.create(video)\n\n        found_video = video_repository.find_by_url(\n            \"https://example.com/video2\"\n        )\n        assert found_video is not None\n        assert found_video.url == \"https://example.com/video2\"\n\n    def test_find_by_id(self, video_repository):\n        \"\"\"\n        Tests the retrieval of a video by URL in the database.\n        \"\"\"\n        video = VideoFactory.create(url=\"https://example.com/video2\")\n        video_repository.create(video)\n\n        found_video = video_repository.find_by_id(video.id)\n        assert found_video is not None\n        assert found_video.url == \"https://example.com/video2\"\n\n    def test_find_all_videos(self, video_repository):\n        \"\"\"\n        Tests the retrieval of all videos in the database.\n        \"\"\"\n        video_repository.create(\n            VideoFactory.create(url=\"https://example.com/video3\")\n        )\n        video_repository.create(\n            VideoFactory.create(url=\"https://example.com/video4\")\n        )\n\n        videos = video_repository.find_all()\n\n        assert len(videos) == 2\n\n    def test_delete_video(self, video_repository):\n        \"\"\"\n        Tests the deletion of a video from the database.\n        \"\"\"\n        video = VideoFactory.create(url=\"https://example.com/video5\")\n        created_video = video_repository.create(video)\n\n        video_repository.delete(created_video)\n        deleted_video = video_repository.find_by_url(\n            \"https://example.com/video5\"\n        )\n\n        assert deleted_video is None\n</code></pre>"},{"location":"codigo/tests/integration/repositories/test_video/#tests.integration.repositories.test_video.TestVideoRepository.test_create_video","title":"<code>test_create_video(video_repository)</code>","text":"<p>Tests the creation of a video in the database.</p> Source code in <code>tests/integration/repositories/test_video.py</code> <pre><code>def test_create_video(self, video_repository):\n    \"\"\"\n    Tests the creation of a video in the database.\n    \"\"\"\n    video = VideoFactory.create(url=\"https://example.com/video1\")\n    created_video = video_repository.create(video)\n\n    assert created_video.id is not None\n    assert created_video.url == \"https://example.com/video1\"\n    assert created_video.created_at is not None\n</code></pre>"},{"location":"codigo/tests/integration/repositories/test_video/#tests.integration.repositories.test_video.TestVideoRepository.test_delete_video","title":"<code>test_delete_video(video_repository)</code>","text":"<p>Tests the deletion of a video from the database.</p> Source code in <code>tests/integration/repositories/test_video.py</code> <pre><code>def test_delete_video(self, video_repository):\n    \"\"\"\n    Tests the deletion of a video from the database.\n    \"\"\"\n    video = VideoFactory.create(url=\"https://example.com/video5\")\n    created_video = video_repository.create(video)\n\n    video_repository.delete(created_video)\n    deleted_video = video_repository.find_by_url(\n        \"https://example.com/video5\"\n    )\n\n    assert deleted_video is None\n</code></pre>"},{"location":"codigo/tests/integration/repositories/test_video/#tests.integration.repositories.test_video.TestVideoRepository.test_find_all_videos","title":"<code>test_find_all_videos(video_repository)</code>","text":"<p>Tests the retrieval of all videos in the database.</p> Source code in <code>tests/integration/repositories/test_video.py</code> <pre><code>def test_find_all_videos(self, video_repository):\n    \"\"\"\n    Tests the retrieval of all videos in the database.\n    \"\"\"\n    video_repository.create(\n        VideoFactory.create(url=\"https://example.com/video3\")\n    )\n    video_repository.create(\n        VideoFactory.create(url=\"https://example.com/video4\")\n    )\n\n    videos = video_repository.find_all()\n\n    assert len(videos) == 2\n</code></pre>"},{"location":"codigo/tests/integration/repositories/test_video/#tests.integration.repositories.test_video.TestVideoRepository.test_find_by_id","title":"<code>test_find_by_id(video_repository)</code>","text":"<p>Tests the retrieval of a video by URL in the database.</p> Source code in <code>tests/integration/repositories/test_video.py</code> <pre><code>def test_find_by_id(self, video_repository):\n    \"\"\"\n    Tests the retrieval of a video by URL in the database.\n    \"\"\"\n    video = VideoFactory.create(url=\"https://example.com/video2\")\n    video_repository.create(video)\n\n    found_video = video_repository.find_by_id(video.id)\n    assert found_video is not None\n    assert found_video.url == \"https://example.com/video2\"\n</code></pre>"},{"location":"codigo/tests/integration/repositories/test_video/#tests.integration.repositories.test_video.TestVideoRepository.test_find_by_url","title":"<code>test_find_by_url(video_repository)</code>","text":"<p>Tests the retrieval of a video by URL in the database.</p> Source code in <code>tests/integration/repositories/test_video.py</code> <pre><code>def test_find_by_url(self, video_repository):\n    \"\"\"\n    Tests the retrieval of a video by URL in the database.\n    \"\"\"\n    video = VideoFactory.create(url=\"https://example.com/video2\")\n    video_repository.create(video)\n\n    found_video = video_repository.find_by_url(\n        \"https://example.com/video2\"\n    )\n    assert found_video is not None\n    assert found_video.url == \"https://example.com/video2\"\n</code></pre>"},{"location":"codigo/tests/integration/repositories/test_video/#tests.integration.repositories.test_video.video_repository","title":"<code>video_repository(in_memory_session)</code>","text":"<p>Fixture for initializing a VideoRepository with an in-memory database session.</p> <p>Parameters:</p> Name Type Description Default <code>in_memory_session</code> <code>Session</code> <p>An SQLAlchemy session configured for in-memory operations.</p> required <p>Returns:</p> Type Description <code>VideoRepository</code> <p>An instance of VideoRepository for managing video data in the in-memory database.</p> Source code in <code>tests/integration/repositories/test_video.py</code> <pre><code>@pytest.fixture\ndef video_repository(in_memory_session: Session) -&gt; VideoRepository:\n    \"\"\"Fixture for initializing a VideoRepository with an in-memory database session.\n\n    Args:\n        in_memory_session (Session): An SQLAlchemy session configured for in-memory operations.\n\n    Returns:\n        (VideoRepository): An instance of VideoRepository for managing video data in the in-memory database.\n    \"\"\"\n    return VideoRepository(in_memory_session)\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_create/","title":"Test create","text":""},{"location":"codigo/tests/unit/application/use_cases/test_create/#tests.unit.application.use_cases.test_create.TestCreateVideoUseCase","title":"<code>TestCreateVideoUseCase</code>","text":"<p>Test suite for CreateVideoUseCase.</p> Source code in <code>tests/unit/application/use_cases/test_create.py</code> <pre><code>@pytest.mark.unit\nclass TestCreateVideoUseCase:\n    \"\"\"Test suite for CreateVideoUseCase.\"\"\"\n\n    @pytest.fixture(autouse=True)\n    def setup_method(self):\n        \"\"\"Setup method to initialize test objects.\"\"\"\n        self.video_repository = MagicMock(spec=AbstractVideoRepository)\n        self.use_case = CreateVideoUseCase(self.video_repository)\n\n    def test_execute_creates_video_successfully(self):\n        \"\"\"Test that a video is created successfully.\"\"\"\n        url = \"https://example.com/video\"\n        expected_video = VideoFactory.create(url)\n\n        self.video_repository.find_by_url.return_value = None\n        self.video_repository.create.return_value = expected_video\n\n        created_video = self.use_case.execute(url)\n\n        self.video_repository.find_by_url.assert_called_once_with(url)\n        self.video_repository.create.assert_called_once()\n        assert created_video.url == expected_video.url\n\n    def test_execute_raises_invalid_url_error_on_duplicate_url(self):\n        \"\"\"Test that an DuplicateUrlError is raised for duplicate URLs.\"\"\"\n        url = \"https://example.com/video\"\n        existing_video = VideoEntity(url=url)\n\n        self.video_repository.find_by_url.return_value = existing_video\n\n        with pytest.raises(DuplicateUrlError) as exc_info:\n            self.use_case.execute(url)\n\n        assert (\n            str(exc_info.value.message)\n            == ErrorMessagesEnum.DUPLICATE_URL.value\n        )\n        self.video_repository.find_by_url.assert_called_once_with(url)\n        self.video_repository.create.assert_not_called()\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_create/#tests.unit.application.use_cases.test_create.TestCreateVideoUseCase.setup_method","title":"<code>setup_method()</code>","text":"<p>Setup method to initialize test objects.</p> Source code in <code>tests/unit/application/use_cases/test_create.py</code> <pre><code>@pytest.fixture(autouse=True)\ndef setup_method(self):\n    \"\"\"Setup method to initialize test objects.\"\"\"\n    self.video_repository = MagicMock(spec=AbstractVideoRepository)\n    self.use_case = CreateVideoUseCase(self.video_repository)\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_create/#tests.unit.application.use_cases.test_create.TestCreateVideoUseCase.test_execute_creates_video_successfully","title":"<code>test_execute_creates_video_successfully()</code>","text":"<p>Test that a video is created successfully.</p> Source code in <code>tests/unit/application/use_cases/test_create.py</code> <pre><code>def test_execute_creates_video_successfully(self):\n    \"\"\"Test that a video is created successfully.\"\"\"\n    url = \"https://example.com/video\"\n    expected_video = VideoFactory.create(url)\n\n    self.video_repository.find_by_url.return_value = None\n    self.video_repository.create.return_value = expected_video\n\n    created_video = self.use_case.execute(url)\n\n    self.video_repository.find_by_url.assert_called_once_with(url)\n    self.video_repository.create.assert_called_once()\n    assert created_video.url == expected_video.url\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_create/#tests.unit.application.use_cases.test_create.TestCreateVideoUseCase.test_execute_raises_invalid_url_error_on_duplicate_url","title":"<code>test_execute_raises_invalid_url_error_on_duplicate_url()</code>","text":"<p>Test that an DuplicateUrlError is raised for duplicate URLs.</p> Source code in <code>tests/unit/application/use_cases/test_create.py</code> <pre><code>def test_execute_raises_invalid_url_error_on_duplicate_url(self):\n    \"\"\"Test that an DuplicateUrlError is raised for duplicate URLs.\"\"\"\n    url = \"https://example.com/video\"\n    existing_video = VideoEntity(url=url)\n\n    self.video_repository.find_by_url.return_value = existing_video\n\n    with pytest.raises(DuplicateUrlError) as exc_info:\n        self.use_case.execute(url)\n\n    assert (\n        str(exc_info.value.message)\n        == ErrorMessagesEnum.DUPLICATE_URL.value\n    )\n    self.video_repository.find_by_url.assert_called_once_with(url)\n    self.video_repository.create.assert_not_called()\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_delete/","title":"Test delete","text":""},{"location":"codigo/tests/unit/application/use_cases/test_delete/#tests.unit.application.use_cases.test_delete.TestDeleteVideoUseCase","title":"<code>TestDeleteVideoUseCase</code>","text":"Source code in <code>tests/unit/application/use_cases/test_delete.py</code> <pre><code>@pytest.mark.unit\nclass TestDeleteVideoUseCase:\n    def setup_method(self):\n        \"\"\"Setup a new instance of DeleteVideoUseCase for each test.\"\"\"\n        self.video_repository = MagicMock(spec=AbstractVideoRepository)\n        self.delete_video_use_case = DeleteVideoUseCase(self.video_repository)\n\n    def test_delete_video_success(self):\n        \"\"\"Test successful deletion of a video.\"\"\"\n        video_url = \"http://example.com/video\"\n        video_entity = VideoFactory.create(url=video_url)\n\n        self.video_repository.find_by_id.return_value = video_entity\n        self.video_repository.delete.return_value = None\n\n        self.delete_video_use_case.execute(video_entity.id)\n\n        self.video_repository.find_by_id.assert_called_once_with(\n            video_entity.id\n        )\n        self.video_repository.delete.assert_called_once_with(video_entity)\n\n    def test_delete_NO_VIDEOS_FOUND(self):\n        \"\"\"Test deletion when the video is not found.\"\"\"\n        video_id = \"123e4567-e89b-12d3-a456-426614174000\"\n\n        self.video_repository.find_by_id.return_value = None\n\n        with pytest.raises(VideoNotFoundError) as excinfo:\n            self.delete_video_use_case.execute(video_id)\n\n        assert excinfo.value.message == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n        assert excinfo.value.name == \"VideoNotFoundError\"\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_delete/#tests.unit.application.use_cases.test_delete.TestDeleteVideoUseCase.setup_method","title":"<code>setup_method()</code>","text":"<p>Setup a new instance of DeleteVideoUseCase for each test.</p> Source code in <code>tests/unit/application/use_cases/test_delete.py</code> <pre><code>def setup_method(self):\n    \"\"\"Setup a new instance of DeleteVideoUseCase for each test.\"\"\"\n    self.video_repository = MagicMock(spec=AbstractVideoRepository)\n    self.delete_video_use_case = DeleteVideoUseCase(self.video_repository)\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_delete/#tests.unit.application.use_cases.test_delete.TestDeleteVideoUseCase.test_delete_NO_VIDEOS_FOUND","title":"<code>test_delete_NO_VIDEOS_FOUND()</code>","text":"<p>Test deletion when the video is not found.</p> Source code in <code>tests/unit/application/use_cases/test_delete.py</code> <pre><code>def test_delete_NO_VIDEOS_FOUND(self):\n    \"\"\"Test deletion when the video is not found.\"\"\"\n    video_id = \"123e4567-e89b-12d3-a456-426614174000\"\n\n    self.video_repository.find_by_id.return_value = None\n\n    with pytest.raises(VideoNotFoundError) as excinfo:\n        self.delete_video_use_case.execute(video_id)\n\n    assert excinfo.value.message == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n    assert excinfo.value.name == \"VideoNotFoundError\"\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_delete/#tests.unit.application.use_cases.test_delete.TestDeleteVideoUseCase.test_delete_video_success","title":"<code>test_delete_video_success()</code>","text":"<p>Test successful deletion of a video.</p> Source code in <code>tests/unit/application/use_cases/test_delete.py</code> <pre><code>def test_delete_video_success(self):\n    \"\"\"Test successful deletion of a video.\"\"\"\n    video_url = \"http://example.com/video\"\n    video_entity = VideoFactory.create(url=video_url)\n\n    self.video_repository.find_by_id.return_value = video_entity\n    self.video_repository.delete.return_value = None\n\n    self.delete_video_use_case.execute(video_entity.id)\n\n    self.video_repository.find_by_id.assert_called_once_with(\n        video_entity.id\n    )\n    self.video_repository.delete.assert_called_once_with(video_entity)\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_read_all/","title":"Test read all","text":""},{"location":"codigo/tests/unit/application/use_cases/test_read_all/#tests.unit.application.use_cases.test_read_all.TestReadAllVideosUseCase","title":"<code>TestReadAllVideosUseCase</code>","text":"<p>Test suite for ReadAllVideosUseCase.</p> Source code in <code>tests/unit/application/use_cases/test_read_all.py</code> <pre><code>@pytest.mark.unit\nclass TestReadAllVideosUseCase:\n    \"\"\"Test suite for ReadAllVideosUseCase.\"\"\"\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        \"\"\"Set up a mock video repository and use case before each test.\"\"\"\n        self.mock_video_repository = Mock(spec=AbstractVideoRepository)\n        self.use_case = ReadAllVideosUseCase(\n            video_repository=self.mock_video_repository\n        )\n\n    def test_read_all_videos_success(self):\n        \"\"\"Test case when videos are found in the repository.\"\"\"\n        video1 = VideoFactory.create(url=\"http://example.com/video1\")\n        video2 = VideoFactory.create(url=\"http://example.com/video2\")\n        self.mock_video_repository.find_all.return_value = [video1, video2]\n\n        response = self.use_case.execute()\n\n        assert response.status_code == 200\n        assert len(response.data) == 2\n        assert response.data[0].url == \"http://example.com/video1\"\n        assert response.data[1].url == \"http://example.com/video2\"\n        self.mock_video_repository.find_all.assert_called_once()\n\n    def test_read_all_videos_not_found(self):\n        \"\"\"Test case when no videos are found in the repository.\"\"\"\n        self.mock_video_repository.find_all.return_value = []\n\n        with pytest.raises(VideoNotFoundError) as exc_info:\n            self.use_case.execute()\n\n        assert (\n            exc_info.value.message == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n        )\n        assert exc_info.value.name == \"VideoNotFoundError\"\n        self.mock_video_repository.find_all.assert_called_once()\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_read_all/#tests.unit.application.use_cases.test_read_all.TestReadAllVideosUseCase.setup","title":"<code>setup()</code>","text":"<p>Set up a mock video repository and use case before each test.</p> Source code in <code>tests/unit/application/use_cases/test_read_all.py</code> <pre><code>@pytest.fixture(autouse=True)\ndef setup(self):\n    \"\"\"Set up a mock video repository and use case before each test.\"\"\"\n    self.mock_video_repository = Mock(spec=AbstractVideoRepository)\n    self.use_case = ReadAllVideosUseCase(\n        video_repository=self.mock_video_repository\n    )\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_read_all/#tests.unit.application.use_cases.test_read_all.TestReadAllVideosUseCase.test_read_all_videos_not_found","title":"<code>test_read_all_videos_not_found()</code>","text":"<p>Test case when no videos are found in the repository.</p> Source code in <code>tests/unit/application/use_cases/test_read_all.py</code> <pre><code>def test_read_all_videos_not_found(self):\n    \"\"\"Test case when no videos are found in the repository.\"\"\"\n    self.mock_video_repository.find_all.return_value = []\n\n    with pytest.raises(VideoNotFoundError) as exc_info:\n        self.use_case.execute()\n\n    assert (\n        exc_info.value.message == ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n    )\n    assert exc_info.value.name == \"VideoNotFoundError\"\n    self.mock_video_repository.find_all.assert_called_once()\n</code></pre>"},{"location":"codigo/tests/unit/application/use_cases/test_read_all/#tests.unit.application.use_cases.test_read_all.TestReadAllVideosUseCase.test_read_all_videos_success","title":"<code>test_read_all_videos_success()</code>","text":"<p>Test case when videos are found in the repository.</p> Source code in <code>tests/unit/application/use_cases/test_read_all.py</code> <pre><code>def test_read_all_videos_success(self):\n    \"\"\"Test case when videos are found in the repository.\"\"\"\n    video1 = VideoFactory.create(url=\"http://example.com/video1\")\n    video2 = VideoFactory.create(url=\"http://example.com/video2\")\n    self.mock_video_repository.find_all.return_value = [video1, video2]\n\n    response = self.use_case.execute()\n\n    assert response.status_code == 200\n    assert len(response.data) == 2\n    assert response.data[0].url == \"http://example.com/video1\"\n    assert response.data[1].url == \"http://example.com/video2\"\n    self.mock_video_repository.find_all.assert_called_once()\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/","title":"Test videos","text":""},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity","title":"<code>TestVideoEntity</code>","text":"<p>Test suite for the VideoEntity class.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>@pytest.mark.unit\nclass TestVideoEntity:\n    \"\"\"Test suite for the VideoEntity class.\"\"\"\n\n    def test_video_entity_creation(self):\n        \"\"\"Test the creation of a VideoEntity with a valid URL.\"\"\"\n        url = \"https://example.com\"\n        video = VideoEntity(url=url)\n\n        assert video.url == url\n        assert isinstance(video.id, uuid.UUID)\n        assert isinstance(video.created_at, datetime)\n        assert video.updated_at is None\n\n    def test_video_entity_uuid_generation(self):\n        \"\"\"Test that a UUID is generated when no id is provided.\"\"\"\n        video = VideoEntity(url=\"https://example.com\")\n\n        assert isinstance(video.id, uuid.UUID)\n\n    def test_video_entity_url_validation(self):\n        \"\"\"Test that an invalid URL raises a InvalidUrlError.\"\"\"\n        with pytest.raises(InvalidUrlError):\n            VideoEntity(url=\"invalid_url\")\n\n    def test_video_entity_manual_id(self):\n        \"\"\"Test setting a custom UUID.\"\"\"\n        custom_id = uuid.uuid4()\n        video = VideoEntity(url=\"https://example.com\", id=custom_id)\n\n        assert video.id == custom_id\n\n    def test_created_at_field(self):\n        \"\"\"Test that the created_at field is automatically set.\"\"\"\n        video = VideoEntity(url=\"https://example.com\")\n\n        assert isinstance(video.created_at, datetime)\n        assert video.created_at &lt;= datetime.now()\n\n    def test_updated_at_on_url_change(self):\n        \"\"\"Test that updated_at is updated when the URL is modified.\"\"\"\n        video = VideoEntity(url=\"https://example.com\")\n        assert video.updated_at is None\n\n    def test_updated_at_does_not_change_on_creation(self):\n        \"\"\"Test that updated_at remains None if nothing changes.\"\"\"\n        video = VideoEntity(url=\"https://example.com\")\n\n        assert video.updated_at is None\n\n    def test_setting_created_at(self):\n        \"\"\"Test setting the created_at field manually.\"\"\"\n        custom_time = datetime(2022, 1, 1)\n        video = VideoEntity(url=\"https://example.com\", created_at=custom_time)\n\n        assert video.created_at == custom_time\n\n    def test_setting_updated_at_manually(self):\n        \"\"\"Test manually setting the updated_at field.\"\"\"\n        custom_time = datetime(2023, 1, 1)\n        video = VideoEntity(url=\"https://example.com\", updated_at=custom_time)\n\n        assert video.updated_at == custom_time\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_created_at_field","title":"<code>test_created_at_field()</code>","text":"<p>Test that the created_at field is automatically set.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_created_at_field(self):\n    \"\"\"Test that the created_at field is automatically set.\"\"\"\n    video = VideoEntity(url=\"https://example.com\")\n\n    assert isinstance(video.created_at, datetime)\n    assert video.created_at &lt;= datetime.now()\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_setting_created_at","title":"<code>test_setting_created_at()</code>","text":"<p>Test setting the created_at field manually.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_setting_created_at(self):\n    \"\"\"Test setting the created_at field manually.\"\"\"\n    custom_time = datetime(2022, 1, 1)\n    video = VideoEntity(url=\"https://example.com\", created_at=custom_time)\n\n    assert video.created_at == custom_time\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_setting_updated_at_manually","title":"<code>test_setting_updated_at_manually()</code>","text":"<p>Test manually setting the updated_at field.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_setting_updated_at_manually(self):\n    \"\"\"Test manually setting the updated_at field.\"\"\"\n    custom_time = datetime(2023, 1, 1)\n    video = VideoEntity(url=\"https://example.com\", updated_at=custom_time)\n\n    assert video.updated_at == custom_time\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_updated_at_does_not_change_on_creation","title":"<code>test_updated_at_does_not_change_on_creation()</code>","text":"<p>Test that updated_at remains None if nothing changes.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_updated_at_does_not_change_on_creation(self):\n    \"\"\"Test that updated_at remains None if nothing changes.\"\"\"\n    video = VideoEntity(url=\"https://example.com\")\n\n    assert video.updated_at is None\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_updated_at_on_url_change","title":"<code>test_updated_at_on_url_change()</code>","text":"<p>Test that updated_at is updated when the URL is modified.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_updated_at_on_url_change(self):\n    \"\"\"Test that updated_at is updated when the URL is modified.\"\"\"\n    video = VideoEntity(url=\"https://example.com\")\n    assert video.updated_at is None\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_video_entity_creation","title":"<code>test_video_entity_creation()</code>","text":"<p>Test the creation of a VideoEntity with a valid URL.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_video_entity_creation(self):\n    \"\"\"Test the creation of a VideoEntity with a valid URL.\"\"\"\n    url = \"https://example.com\"\n    video = VideoEntity(url=url)\n\n    assert video.url == url\n    assert isinstance(video.id, uuid.UUID)\n    assert isinstance(video.created_at, datetime)\n    assert video.updated_at is None\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_video_entity_manual_id","title":"<code>test_video_entity_manual_id()</code>","text":"<p>Test setting a custom UUID.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_video_entity_manual_id(self):\n    \"\"\"Test setting a custom UUID.\"\"\"\n    custom_id = uuid.uuid4()\n    video = VideoEntity(url=\"https://example.com\", id=custom_id)\n\n    assert video.id == custom_id\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_video_entity_url_validation","title":"<code>test_video_entity_url_validation()</code>","text":"<p>Test that an invalid URL raises a InvalidUrlError.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_video_entity_url_validation(self):\n    \"\"\"Test that an invalid URL raises a InvalidUrlError.\"\"\"\n    with pytest.raises(InvalidUrlError):\n        VideoEntity(url=\"invalid_url\")\n</code></pre>"},{"location":"codigo/tests/unit/domain/entities/test_videos/#tests.unit.domain.entities.test_video.TestVideoEntity.test_video_entity_uuid_generation","title":"<code>test_video_entity_uuid_generation()</code>","text":"<p>Test that a UUID is generated when no id is provided.</p> Source code in <code>tests/unit/domain/entities/test_video.py</code> <pre><code>def test_video_entity_uuid_generation(self):\n    \"\"\"Test that a UUID is generated when no id is provided.\"\"\"\n    video = VideoEntity(url=\"https://example.com\")\n\n    assert isinstance(video.id, uuid.UUID)\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/","title":"Test video","text":""},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory","title":"<code>TestVideoFactory</code>","text":"<p>A test suite for the VideoFactory class using pytest.</p> <p>This class tests various scenarios for creating VideoEntity instances, including handling of default values, validation of URLs, and generation of UUIDs.</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>@pytest.mark.unit\nclass TestVideoFactory:\n    \"\"\"\n    A test suite for the VideoFactory class using pytest.\n\n    This class tests various scenarios for creating VideoEntity instances,\n    including handling of default values, validation of URLs, and generation of UUIDs.\n    \"\"\"\n\n    def test_create_video_with_all_fields(self):\n        \"\"\"\n        Test creating a VideoEntity with all fields provided (id, url, created_at, updated_at).\n        \"\"\"\n        url = \"https://example.com/video\"\n        video_id = uuid.uuid4()\n        created_at = datetime(2023, 9, 25, 12, 0)\n        updated_at = datetime(2023, 9, 25, 13, 0)\n\n        video = VideoFactory.create(\n            url=url, id=video_id, created_at=created_at, updated_at=updated_at\n        )\n\n        assert isinstance(video, VideoEntity)\n        assert video.url == url\n        assert video.id == video_id\n        assert video.created_at == created_at\n        assert video.updated_at == updated_at\n\n    def test_create_video_with_defaults(self):\n        \"\"\"\n        Test creating a VideoEntity with only the URL provided.\n        \"\"\"\n        url = \"https://example.com/video\"\n\n        video = VideoFactory.create(url=url)\n\n        assert isinstance(video, VideoEntity)\n        assert video.url == url\n        assert isinstance(video.id, uuid.UUID)\n        assert isinstance(video.created_at, datetime)\n        assert video.updated_at is None\n\n    def test_create_video_with_defaults_method(self):\n        \"\"\"\n        Test creating a VideoEntity using the create_with_defaults method.\n        \"\"\"\n\n        video = VideoFactory.create_with_defaults()\n\n        assert isinstance(video, VideoEntity)\n        assert video.url == \"https://example.com/default-video\"\n        assert isinstance(video.id, uuid.UUID)\n        assert isinstance(video.created_at, datetime)\n        assert video.updated_at is None\n\n    def test_invalid_url_raises_error(self):\n        \"\"\"\n        Test that providing an invalid URL raises a InvalidUrlError.\n        \"\"\"\n        invalid_url = \"ftp://invalid-url.com\"\n\n        with pytest.raises(InvalidUrlError) as exc_info:\n            VideoFactory.create(url=invalid_url)\n\n        assert (\n            str(exc_info.value.message) == ErrorMessagesEnum.INVALID_URL.value\n        )\n\n    def test_create_video_with_no_id_generates_uuid(self):\n        \"\"\"\n        Test that the factory generates a UUID if none is provided.\n        \"\"\"\n        url = \"https://example.com/video\"\n\n        video = VideoFactory.create(url=url)\n\n        assert isinstance(video.id, uuid.UUID)\n\n    def test_create_video_with_no_created_at_generates_current_datetime(self):\n        \"\"\"\n        Test that the factory sets the created_at field to the current time if none is provided.\n\n        \"\"\"\n        url = \"https://example.com/video\"\n\n        video = VideoFactory.create(url=url)\n\n        assert isinstance(video.created_at, datetime)\n        assert video.created_at &lt;= datetime.now()\n\n    def test_create_video_with_updated_at(self):\n        \"\"\"\n        Test that providing an updated_at value sets it correctly in the VideoEntity.\n        \"\"\"\n        url = \"https://example.com/video\"\n        updated_at = datetime(2023, 9, 25, 13, 0)\n\n        video = VideoFactory.create(url=url, updated_at=updated_at)\n\n        assert video.updated_at == updated_at\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory.test_create_video_with_all_fields","title":"<code>test_create_video_with_all_fields()</code>","text":"<p>Test creating a VideoEntity with all fields provided (id, url, created_at, updated_at).</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>def test_create_video_with_all_fields(self):\n    \"\"\"\n    Test creating a VideoEntity with all fields provided (id, url, created_at, updated_at).\n    \"\"\"\n    url = \"https://example.com/video\"\n    video_id = uuid.uuid4()\n    created_at = datetime(2023, 9, 25, 12, 0)\n    updated_at = datetime(2023, 9, 25, 13, 0)\n\n    video = VideoFactory.create(\n        url=url, id=video_id, created_at=created_at, updated_at=updated_at\n    )\n\n    assert isinstance(video, VideoEntity)\n    assert video.url == url\n    assert video.id == video_id\n    assert video.created_at == created_at\n    assert video.updated_at == updated_at\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory.test_create_video_with_defaults","title":"<code>test_create_video_with_defaults()</code>","text":"<p>Test creating a VideoEntity with only the URL provided.</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>def test_create_video_with_defaults(self):\n    \"\"\"\n    Test creating a VideoEntity with only the URL provided.\n    \"\"\"\n    url = \"https://example.com/video\"\n\n    video = VideoFactory.create(url=url)\n\n    assert isinstance(video, VideoEntity)\n    assert video.url == url\n    assert isinstance(video.id, uuid.UUID)\n    assert isinstance(video.created_at, datetime)\n    assert video.updated_at is None\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory.test_create_video_with_defaults_method","title":"<code>test_create_video_with_defaults_method()</code>","text":"<p>Test creating a VideoEntity using the create_with_defaults method.</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>def test_create_video_with_defaults_method(self):\n    \"\"\"\n    Test creating a VideoEntity using the create_with_defaults method.\n    \"\"\"\n\n    video = VideoFactory.create_with_defaults()\n\n    assert isinstance(video, VideoEntity)\n    assert video.url == \"https://example.com/default-video\"\n    assert isinstance(video.id, uuid.UUID)\n    assert isinstance(video.created_at, datetime)\n    assert video.updated_at is None\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory.test_create_video_with_no_created_at_generates_current_datetime","title":"<code>test_create_video_with_no_created_at_generates_current_datetime()</code>","text":"<p>Test that the factory sets the created_at field to the current time if none is provided.</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>def test_create_video_with_no_created_at_generates_current_datetime(self):\n    \"\"\"\n    Test that the factory sets the created_at field to the current time if none is provided.\n\n    \"\"\"\n    url = \"https://example.com/video\"\n\n    video = VideoFactory.create(url=url)\n\n    assert isinstance(video.created_at, datetime)\n    assert video.created_at &lt;= datetime.now()\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory.test_create_video_with_no_id_generates_uuid","title":"<code>test_create_video_with_no_id_generates_uuid()</code>","text":"<p>Test that the factory generates a UUID if none is provided.</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>def test_create_video_with_no_id_generates_uuid(self):\n    \"\"\"\n    Test that the factory generates a UUID if none is provided.\n    \"\"\"\n    url = \"https://example.com/video\"\n\n    video = VideoFactory.create(url=url)\n\n    assert isinstance(video.id, uuid.UUID)\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory.test_create_video_with_updated_at","title":"<code>test_create_video_with_updated_at()</code>","text":"<p>Test that providing an updated_at value sets it correctly in the VideoEntity.</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>def test_create_video_with_updated_at(self):\n    \"\"\"\n    Test that providing an updated_at value sets it correctly in the VideoEntity.\n    \"\"\"\n    url = \"https://example.com/video\"\n    updated_at = datetime(2023, 9, 25, 13, 0)\n\n    video = VideoFactory.create(url=url, updated_at=updated_at)\n\n    assert video.updated_at == updated_at\n</code></pre>"},{"location":"codigo/tests/unit/domain/factories/test_video/#tests.unit.domain.factories.test_video.TestVideoFactory.test_invalid_url_raises_error","title":"<code>test_invalid_url_raises_error()</code>","text":"<p>Test that providing an invalid URL raises a InvalidUrlError.</p> Source code in <code>tests/unit/domain/factories/test_video.py</code> <pre><code>def test_invalid_url_raises_error(self):\n    \"\"\"\n    Test that providing an invalid URL raises a InvalidUrlError.\n    \"\"\"\n    invalid_url = \"ftp://invalid-url.com\"\n\n    with pytest.raises(InvalidUrlError) as exc_info:\n        VideoFactory.create(url=invalid_url)\n\n    assert (\n        str(exc_info.value.message) == ErrorMessagesEnum.INVALID_URL.value\n    )\n</code></pre>"},{"location":"codigo/tests/unit/infrastructure/mapper/test_video/","title":"Test video","text":""},{"location":"codigo/tests/unit/infrastructure/mapper/test_video/#tests.unit.infra.mapper.test_video.TestVideoMapper","title":"<code>TestVideoMapper</code>","text":"Source code in <code>tests/unit/infra/mapper/test_video.py</code> <pre><code>@pytest.mark.unit\nclass TestVideoMapper:\n    def test_to_entity(self):\n        \"\"\"Test the conversion from VideoModel to VideoEntity.\"\"\"\n        video_model = VideoModel(\n            id=\"123e4567-e89b-12d3-a456-426614174000\",\n            url=\"https://example.com/video\",\n            created_at=datetime(2023, 1, 1),\n            updated_at=datetime(2023, 1, 2),\n        )\n\n        video_entity = VideoMapper.to_entity(video_model)\n\n        assert isinstance(video_entity, VideoEntity)\n        assert video_entity.id == video_model.id\n        assert video_entity.url == video_model.url\n        assert video_entity.created_at == video_model.created_at\n        assert video_entity.updated_at == video_model.updated_at\n\n    def test_to_model(self):\n        \"\"\"Test the conversion from VideoEntity to VideoModel.\"\"\"\n\n        video_entity = VideoEntity(\n            id=\"123e4567-e89b-12d3-a456-426614174000\",\n            url=\"https://example.com/video\",\n            created_at=datetime(2023, 1, 1),\n            updated_at=datetime(2023, 1, 2),\n        )\n\n        video_model = VideoMapper.to_model(video_entity)\n\n        assert isinstance(video_model, VideoModel)\n        assert video_model.id == video_entity.id\n        assert video_model.url == video_entity.url\n        assert video_model.created_at == video_entity.created_at\n        assert video_model.updated_at == video_entity.updated_at\n</code></pre>"},{"location":"codigo/tests/unit/infrastructure/mapper/test_video/#tests.unit.infra.mapper.test_video.TestVideoMapper.test_to_entity","title":"<code>test_to_entity()</code>","text":"<p>Test the conversion from VideoModel to VideoEntity.</p> Source code in <code>tests/unit/infra/mapper/test_video.py</code> <pre><code>def test_to_entity(self):\n    \"\"\"Test the conversion from VideoModel to VideoEntity.\"\"\"\n    video_model = VideoModel(\n        id=\"123e4567-e89b-12d3-a456-426614174000\",\n        url=\"https://example.com/video\",\n        created_at=datetime(2023, 1, 1),\n        updated_at=datetime(2023, 1, 2),\n    )\n\n    video_entity = VideoMapper.to_entity(video_model)\n\n    assert isinstance(video_entity, VideoEntity)\n    assert video_entity.id == video_model.id\n    assert video_entity.url == video_model.url\n    assert video_entity.created_at == video_model.created_at\n    assert video_entity.updated_at == video_model.updated_at\n</code></pre>"},{"location":"codigo/tests/unit/infrastructure/mapper/test_video/#tests.unit.infra.mapper.test_video.TestVideoMapper.test_to_model","title":"<code>test_to_model()</code>","text":"<p>Test the conversion from VideoEntity to VideoModel.</p> Source code in <code>tests/unit/infra/mapper/test_video.py</code> <pre><code>def test_to_model(self):\n    \"\"\"Test the conversion from VideoEntity to VideoModel.\"\"\"\n\n    video_entity = VideoEntity(\n        id=\"123e4567-e89b-12d3-a456-426614174000\",\n        url=\"https://example.com/video\",\n        created_at=datetime(2023, 1, 1),\n        updated_at=datetime(2023, 1, 2),\n    )\n\n    video_model = VideoMapper.to_model(video_entity)\n\n    assert isinstance(video_model, VideoModel)\n    assert video_model.id == video_entity.id\n    assert video_model.url == video_entity.url\n    assert video_model.created_at == video_entity.created_at\n    assert video_model.updated_at == video_entity.updated_at\n</code></pre>"}]}