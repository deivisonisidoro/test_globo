{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Teste Globo","text":"<p>Esta aplica\u00e7\u00e3o \u00e9 um teste t\u00e9cnico da Globo que permite:</p> <ul> <li>Inserir e armazenar uma URL do YouTube.</li> <li>Listar as URLs salvas.</li> <li>Recuperar a URL e tocar atrav\u00e9s da solu\u00e7\u00e3o.</li> <li>Deletar a URL.</li> </ul>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Backend: FastAPI, PostgreSQL</li> <li>Frontend: Next.js, Tailwind CSS, Shadcn, Lucide, React Hook Form, Zod</li> <li>Testes: pytest, incluindo testes unit\u00e1rios, de integra\u00e7\u00e3o e e2e.</li> <li>Gerenciador de Pacotes: pnpm</li> </ul>"},{"location":"codigo/source/application/use_cases/create/","title":"Create","text":""},{"location":"codigo/source/application/use_cases/create/#src.application.use_cases.create.CreateVideoUseCase","title":"<code>CreateVideoUseCase</code>","text":"<p>               Bases: <code>AbstractCreateVideoUseCase</code></p> <p>Use case for video-related operations.</p> <p>This class encapsulates the business logic for handling video-related actions, such as creating a new video and checking for duplicates.</p> Source code in <code>src/application/use_cases/create.py</code> <pre><code>class CreateVideoUseCase(AbstractCreateVideoUseCase):\n    \"\"\"Use case for video-related operations.\n\n    This class encapsulates the business logic for handling video-related actions,\n    such as creating a new video and checking for duplicates.\n    \"\"\"\n\n    def __init__(self, video_repository: AbstractVideoRepository):\n        \"\"\"Initializes the VideoUseCase.\n\n        Args:\n            video_repository (AbstractVideoRepository): The repository to store video entities.\n        \"\"\"\n        self.video_repository = video_repository\n\n    def execute(self, url: str) -&gt; VideoEntity:\n        \"\"\"Executes the use case to handle video operations.\n\n        This method verifies if a video with the same URL already exists before creating a new one.\n\n        Args:\n            url (str): The URL of the video to create.\n\n        Returns:\n            (VideoResponseDTO): The DTO containing the status code and created video entity.\n\n        Raises:\n            (InvalidUrlError): If the URL is invalid or a video with the same URL already exists.\n        \"\"\"\n        existing_video = self.video_repository.find_by_url(url)\n        if existing_video:\n            raise DuplicateUrlError(\n                message=ErrorMessagesEnum.DUPLICATE_URL.value,\n                name=\"DuplicateUrl\",\n            )\n\n        new_video = VideoFactory.create(url)\n\n        created_video = self.video_repository.create(new_video)\n\n        return created_video\n</code></pre>"},{"location":"codigo/source/application/use_cases/create/#src.application.use_cases.create.CreateVideoUseCase.__init__","title":"<code>__init__(video_repository)</code>","text":"<p>Initializes the VideoUseCase.</p> <p>Parameters:</p> Name Type Description Default <code>video_repository</code> <code>AbstractVideoRepository</code> <p>The repository to store video entities.</p> required Source code in <code>src/application/use_cases/create.py</code> <pre><code>def __init__(self, video_repository: AbstractVideoRepository):\n    \"\"\"Initializes the VideoUseCase.\n\n    Args:\n        video_repository (AbstractVideoRepository): The repository to store video entities.\n    \"\"\"\n    self.video_repository = video_repository\n</code></pre>"},{"location":"codigo/source/application/use_cases/create/#src.application.use_cases.create.CreateVideoUseCase.execute","title":"<code>execute(url)</code>","text":"<p>Executes the use case to handle video operations.</p> <p>This method verifies if a video with the same URL already exists before creating a new one.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to create.</p> required <p>Returns:</p> Type Description <code>VideoResponseDTO</code> <p>The DTO containing the status code and created video entity.</p> <p>Raises:</p> Type Description <code>InvalidUrlError</code> <p>If the URL is invalid or a video with the same URL already exists.</p> Source code in <code>src/application/use_cases/create.py</code> <pre><code>def execute(self, url: str) -&gt; VideoEntity:\n    \"\"\"Executes the use case to handle video operations.\n\n    This method verifies if a video with the same URL already exists before creating a new one.\n\n    Args:\n        url (str): The URL of the video to create.\n\n    Returns:\n        (VideoResponseDTO): The DTO containing the status code and created video entity.\n\n    Raises:\n        (InvalidUrlError): If the URL is invalid or a video with the same URL already exists.\n    \"\"\"\n    existing_video = self.video_repository.find_by_url(url)\n    if existing_video:\n        raise DuplicateUrlError(\n            message=ErrorMessagesEnum.DUPLICATE_URL.value,\n            name=\"DuplicateUrl\",\n        )\n\n    new_video = VideoFactory.create(url)\n\n    created_video = self.video_repository.create(new_video)\n\n    return created_video\n</code></pre>"},{"location":"codigo/source/application/use_cases/delete/","title":"Delete","text":""},{"location":"codigo/source/application/use_cases/delete/#src.application.use_cases.delete.DeleteVideoUseCase","title":"<code>DeleteVideoUseCase</code>","text":"<p>               Bases: <code>AbstractDeleteVideoUseCase</code></p> <p>Concrete use case for deleting a video by URL.</p> Source code in <code>src/application/use_cases/delete.py</code> <pre><code>class DeleteVideoUseCase(AbstractDeleteVideoUseCase):\n    \"\"\"Concrete use case for deleting a video by URL.\"\"\"\n\n    def __init__(self, video_repository: AbstractVideoRepository):\n        \"\"\"Initializes the DeleteVideoUseCase.\n\n        Args:\n            video_repository (AbstractVideoRepository): The repository to delete video entities.\n        \"\"\"\n        self.video_repository = video_repository\n\n    def execute(self, id: str) -&gt; str:\n        \"\"\"Deletes a video by its URL.\n\n        Args:\n            id (str): The ID of the video to delete.\n\n        Returns:\n            VideoResponseDTO: The DTO containing the status code and message.\n\n        Raises:\n            VideoNotFoundError: If no video with the given URL exists.\n        \"\"\"\n        video = self.video_repository.find_by_id(id)\n\n        if not video:\n            raise VideoNotFoundError(\n                message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n                name=\"VideoNotFoundError\",\n            )\n\n        self.video_repository.delete(video)\n\n        return SuccessMessagesEnum.VIDEO_DELETED_SUCCESS.value\n</code></pre>"},{"location":"codigo/source/application/use_cases/delete/#src.application.use_cases.delete.DeleteVideoUseCase.__init__","title":"<code>__init__(video_repository)</code>","text":"<p>Initializes the DeleteVideoUseCase.</p> <p>Parameters:</p> Name Type Description Default <code>video_repository</code> <code>AbstractVideoRepository</code> <p>The repository to delete video entities.</p> required Source code in <code>src/application/use_cases/delete.py</code> <pre><code>def __init__(self, video_repository: AbstractVideoRepository):\n    \"\"\"Initializes the DeleteVideoUseCase.\n\n    Args:\n        video_repository (AbstractVideoRepository): The repository to delete video entities.\n    \"\"\"\n    self.video_repository = video_repository\n</code></pre>"},{"location":"codigo/source/application/use_cases/delete/#src.application.use_cases.delete.DeleteVideoUseCase.execute","title":"<code>execute(id)</code>","text":"<p>Deletes a video by its URL.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the video to delete.</p> required <p>Returns:</p> Name Type Description <code>VideoResponseDTO</code> <code>str</code> <p>The DTO containing the status code and message.</p> <p>Raises:</p> Type Description <code>VideoNotFoundError</code> <p>If no video with the given URL exists.</p> Source code in <code>src/application/use_cases/delete.py</code> <pre><code>def execute(self, id: str) -&gt; str:\n    \"\"\"Deletes a video by its URL.\n\n    Args:\n        id (str): The ID of the video to delete.\n\n    Returns:\n        VideoResponseDTO: The DTO containing the status code and message.\n\n    Raises:\n        VideoNotFoundError: If no video with the given URL exists.\n    \"\"\"\n    video = self.video_repository.find_by_id(id)\n\n    if not video:\n        raise VideoNotFoundError(\n            message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n            name=\"VideoNotFoundError\",\n        )\n\n    self.video_repository.delete(video)\n\n    return SuccessMessagesEnum.VIDEO_DELETED_SUCCESS.value\n</code></pre>"},{"location":"codigo/source/application/use_cases/read_all/","title":"Read all","text":""},{"location":"codigo/source/application/use_cases/read_all/#src.application.use_cases.read_all.ReadAllVideosUseCase","title":"<code>ReadAllVideosUseCase</code>","text":"<p>               Bases: <code>AbstractReadAllVideosUseCase</code></p> <p>Concrete use case for retrieving all videos.</p> <p>This class implements the logic for fetching all video entities from the repository.</p> Source code in <code>src/application/use_cases/read_all.py</code> <pre><code>class ReadAllVideosUseCase(AbstractReadAllVideosUseCase):\n    \"\"\"Concrete use case for retrieving all videos.\n\n    This class implements the logic for fetching all video entities from the repository.\n    \"\"\"\n\n    def __init__(self, video_repository: AbstractVideoRepository):\n        \"\"\"Initializes the abstract ReadAllVideosUseCase.\n\n        Args:\n            video_repository (AbstractVideoRepository): The repository to retrieve video entities.\n        \"\"\"\n        self.video_repository = video_repository\n\n    def execute(self) -&gt; List[VideoEntity]:\n        \"\"\"Fetches all videos from the repository.\n\n        Returns:\n            (VideoResponseDTO): The DTO containing the status code and list of video entities.\n\n        Raises:\n            VideoNotFoundError: If no videos are found in the repository.\n        \"\"\"\n        videos = self.video_repository.find_all()\n\n        if not videos:\n            raise VideoNotFoundError(\n                message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n                name=\"VideoNotFoundError\",\n            )\n\n        return videos\n</code></pre>"},{"location":"codigo/source/application/use_cases/read_all/#src.application.use_cases.read_all.ReadAllVideosUseCase.__init__","title":"<code>__init__(video_repository)</code>","text":"<p>Initializes the abstract ReadAllVideosUseCase.</p> <p>Parameters:</p> Name Type Description Default <code>video_repository</code> <code>AbstractVideoRepository</code> <p>The repository to retrieve video entities.</p> required Source code in <code>src/application/use_cases/read_all.py</code> <pre><code>def __init__(self, video_repository: AbstractVideoRepository):\n    \"\"\"Initializes the abstract ReadAllVideosUseCase.\n\n    Args:\n        video_repository (AbstractVideoRepository): The repository to retrieve video entities.\n    \"\"\"\n    self.video_repository = video_repository\n</code></pre>"},{"location":"codigo/source/application/use_cases/read_all/#src.application.use_cases.read_all.ReadAllVideosUseCase.execute","title":"<code>execute()</code>","text":"<p>Fetches all videos from the repository.</p> <p>Returns:</p> Type Description <code>VideoResponseDTO</code> <p>The DTO containing the status code and list of video entities.</p> <p>Raises:</p> Type Description <code>VideoNotFoundError</code> <p>If no videos are found in the repository.</p> Source code in <code>src/application/use_cases/read_all.py</code> <pre><code>def execute(self) -&gt; List[VideoEntity]:\n    \"\"\"Fetches all videos from the repository.\n\n    Returns:\n        (VideoResponseDTO): The DTO containing the status code and list of video entities.\n\n    Raises:\n        VideoNotFoundError: If no videos are found in the repository.\n    \"\"\"\n    videos = self.video_repository.find_all()\n\n    if not videos:\n        raise VideoNotFoundError(\n            message=ErrorMessagesEnum.NO_VIDEOS_FOUND.value,\n            name=\"VideoNotFoundError\",\n        )\n\n    return videos\n</code></pre>"},{"location":"codigo/source/domain/dtos/video_response/","title":"Video response","text":""},{"location":"codigo/source/domain/dtos/video_response/#src.domain.dtos.video_response.VideoResponseDTO","title":"<code>VideoResponseDTO</code>  <code>dataclass</code>","text":"<p>Data Transfer Object for Video response.</p> <p>This class represents the response structure returned by video-related operations, containing the status code and video data.</p> <p>Attributes:</p> Name Type Description <code>status_code</code> <code>int</code> <p>The HTTP status code.</p> <code>data</code> <code>VideoEntity</code> <p>The created or retrieved video entity.</p> Source code in <code>src/domain/dtos/video_response.py</code> <pre><code>@dataclass\nclass VideoResponseDTO:\n    \"\"\"Data Transfer Object for Video response.\n\n    This class represents the response structure returned by video-related operations,\n    containing the status code and video data.\n\n    Attributes:\n        status_code (int): The HTTP status code.\n        data (VideoEntity): The created or retrieved video entity.\n    \"\"\"\n\n    status_code: int\n    data: VideoEntity\n\n    def __init__(self, status_code: int, data: VideoEntity):\n        \"\"\"Initializes the VideoResponseDTO.\n\n        Args:\n            status_code (int): The HTTP status code.\n            data (VideoEntity): The video entity associated with the response.\n        \"\"\"\n        self.status_code = status_code\n        self.data = data\n</code></pre>"},{"location":"codigo/source/domain/dtos/video_response/#src.domain.dtos.video_response.VideoResponseDTO.__init__","title":"<code>__init__(status_code, data)</code>","text":"<p>Initializes the VideoResponseDTO.</p> <p>Parameters:</p> Name Type Description Default <code>status_code</code> <code>int</code> <p>The HTTP status code.</p> required <code>data</code> <code>VideoEntity</code> <p>The video entity associated with the response.</p> required Source code in <code>src/domain/dtos/video_response.py</code> <pre><code>def __init__(self, status_code: int, data: VideoEntity):\n    \"\"\"Initializes the VideoResponseDTO.\n\n    Args:\n        status_code (int): The HTTP status code.\n        data (VideoEntity): The video entity associated with the response.\n    \"\"\"\n    self.status_code = status_code\n    self.data = data\n</code></pre>"},{"location":"codigo/source/domain/entities/video/","title":"Video","text":""},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity","title":"<code>VideoEntity</code>","text":"<p>A class representing a video entity.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[UUID]</code> <p>Unique identifier for the video. Defaults to None, will generate a UUID if not provided.</p> <code>url</code> <code>str</code> <p>URL of the video. Required field.</p> <code>created_at</code> <code>Optional[datetime]</code> <p>Date and time when the video was created. Defaults to the current time.</p> <code>updated_at</code> <code>Optional[datetime]</code> <p>Date and time when the video was last updated. Defaults to None.</p> Source code in <code>src/domain/entities/video.py</code> <pre><code>class VideoEntity:\n    \"\"\"\n    A class representing a video entity.\n\n    Attributes:\n        id (Optional[uuid.UUID]): Unique identifier for the video. Defaults to None, will generate a UUID if not provided.\n        url (str): URL of the video. Required field.\n        created_at (Optional[datetime]): Date and time when the video was created. Defaults to the current time.\n        updated_at (Optional[datetime]): Date and time when the video was last updated. Defaults to None.\n    \"\"\"\n\n    URL_REGEX = re.compile(r\"^(http|https)://\")\n\n    def __init__(\n        self,\n        url: str,\n        id: Optional[uuid.UUID] = None,\n        created_at: Optional[datetime] = None,\n        updated_at: Optional[datetime] = None,\n    ):\n        \"\"\"\n        Initializes a new instance of the VideoEntity class.\n\n        Args:\n            url (str): The URL of the video. Must start with http or https.\n            id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n            created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n            updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n        \"\"\"\n        self._id = id or uuid.uuid4()\n        self.url = url\n        self._created_at = created_at or datetime.now()\n        self._updated_at = updated_at\n\n    @property\n    def id(self) -&gt; uuid.UUID:\n        \"\"\"Gets the unique identifier of the video.\"\"\"\n        return self._id\n\n    @id.setter\n    def id(self, value: Optional[uuid.UUID]) -&gt; None:\n        \"\"\"Sets the unique identifier of the video.\"\"\"\n        self._id = value or uuid.uuid4()\n\n    @property\n    def url(self) -&gt; str:\n        \"\"\"Gets the URL of the video.\"\"\"\n        return self._url\n\n    @url.setter\n    def url(self, value: str) -&gt; None:\n        \"\"\"\n        Sets the URL of the video with validation.\n\n        Args:\n            value (str): The new URL of the video. Must be a valid URL starting with http or https.\n\n        Raises:\n            (InvalidUrlError): If the URL is invalid.\n        \"\"\"\n        if not self.URL_REGEX.match(value):\n            raise InvalidUrlError(\n                message=ErrorMessagesEnum.INVALID_URL.value, name=\"InvalidUrl\"\n            )\n        self._url = value\n\n    @property\n    def created_at(self) -&gt; datetime:\n        \"\"\"Gets the creation timestamp of the video.\"\"\"\n        return self._created_at\n\n    @created_at.setter\n    def created_at(self, value: Optional[datetime]) -&gt; None:\n        \"\"\"\n        Sets the creation timestamp of the video.\n\n        Args:\n            value (Optional[datetime]): The new creation date and time. Defaults to the current time.\n        \"\"\"\n        self._created_at = value or datetime.now()\n\n    @property\n    def updated_at(self) -&gt; Optional[datetime]:\n        \"\"\"Gets the last updated timestamp of the video.\"\"\"\n        return self._updated_at\n\n    @updated_at.setter\n    def updated_at(self, value: datetime):\n        \"\"\"Sets the updated_at timestamp.\n\n        Args:\n            value (datetime): The new updated timestamp.\n        \"\"\"\n        if value is not None:\n            self._updated_at = value\n        else:\n            self._updated_at = datetime.now()\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Returns a string representation of the VideoEntity instance.\n\n        Returns:\n            str: A string that represents the video entity, including its id, URL, and timestamps.\n        \"\"\"\n        return (\n            f\"VideoEntity(id={self.id}, url='{self.url}', \"\n            f\"created_at='{self.created_at}', updated_at='{self.updated_at}')\"\n        )\n</code></pre>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.created_at","title":"<code>created_at: datetime</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the creation timestamp of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.id","title":"<code>id: uuid.UUID</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the unique identifier of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.updated_at","title":"<code>updated_at: Optional[datetime]</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the last updated timestamp of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.url","title":"<code>url: str</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the URL of the video.</p>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.__init__","title":"<code>__init__(url, id=None, created_at=None, updated_at=None)</code>","text":"<p>Initializes a new instance of the VideoEntity class.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video. Must start with http or https.</p> required <code>id</code> <code>Optional[UUID]</code> <p>Unique identifier for the video. If None, a UUID will be generated.</p> <code>None</code> <code>created_at</code> <code>Optional[datetime]</code> <p>The creation time of the video. Defaults to the current time.</p> <code>None</code> <code>updated_at</code> <code>Optional[datetime]</code> <p>The last updated time of the video. Defaults to None.</p> <code>None</code> Source code in <code>src/domain/entities/video.py</code> <pre><code>def __init__(\n    self,\n    url: str,\n    id: Optional[uuid.UUID] = None,\n    created_at: Optional[datetime] = None,\n    updated_at: Optional[datetime] = None,\n):\n    \"\"\"\n    Initializes a new instance of the VideoEntity class.\n\n    Args:\n        url (str): The URL of the video. Must start with http or https.\n        id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n        created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n        updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n    \"\"\"\n    self._id = id or uuid.uuid4()\n    self.url = url\n    self._created_at = created_at or datetime.now()\n    self._updated_at = updated_at\n</code></pre>"},{"location":"codigo/source/domain/entities/video/#src.domain.entities.video.VideoEntity.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a string representation of the VideoEntity instance.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string that represents the video entity, including its id, URL, and timestamps.</p> Source code in <code>src/domain/entities/video.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Returns a string representation of the VideoEntity instance.\n\n    Returns:\n        str: A string that represents the video entity, including its id, URL, and timestamps.\n    \"\"\"\n    return (\n        f\"VideoEntity(id={self.id}, url='{self.url}', \"\n        f\"created_at='{self.created_at}', updated_at='{self.updated_at}')\"\n    )\n</code></pre>"},{"location":"codigo/source/domain/enums/error_messages/","title":"Error messages","text":""},{"location":"codigo/source/domain/enums/error_messages/#src.domain.enums.error_messages.ErrorMessagesEnum","title":"<code>ErrorMessagesEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for error messages used in the validation of VideoEntity attributes.</p> <p>Attributes:</p> Name Type Description <code>INVALID_URL</code> <code>str</code> <p>Error message when the URL is invalid. The URL must start with 'http' or 'https'.</p> <code>DUPLICATE_URL</code> <code>str</code> <p>Error message when a video with the same URL already exists in the system.</p> <code>NO_VIDEOS_FOUND</code> <code>str</code> <p>Error message when no videos are found in the system.</p> Source code in <code>src/domain/enums/error_messages.py</code> <pre><code>class ErrorMessagesEnum(Enum):\n    \"\"\"\n    Enum for error messages used in the validation of VideoEntity attributes.\n\n    Attributes:\n        INVALID_URL (str): Error message when the URL is invalid.\n            The URL must start with 'http' or 'https'.\n        DUPLICATE_URL (str): Error message when a video with the same URL\n            already exists in the system.\n        NO_VIDEOS_FOUND (str): Error message when no videos are found in the system.\n    \"\"\"\n\n    INVALID_URL = \"Invalid URL. The URL must start with 'http' or 'https'.\"\n    DUPLICATE_URL = \"A video with the same URL already exists.\"\n    NO_VIDEOS_FOUND = \"No videos were found.\"\n</code></pre>"},{"location":"codigo/source/domain/enums/success_messages/","title":"Success messages","text":""},{"location":"codigo/source/domain/enums/success_messages/#src.domain.enums.success_messages.SuccessMessagesEnum","title":"<code>SuccessMessagesEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for success messages used in the application.</p> <p>This enum contains standardized messages for success responses, such as when a video is created or deleted successfully. Using enums for success messages helps ensure consistency across the application.</p> <p>Attributes:</p> Name Type Description <code>VIDEO_CREATED_SUCCESS</code> <code>str</code> <p>Message returned when a video is successfully created.</p> <code>VIDEO_DELETED_SUCCESS</code> <code>str</code> <p>Message returned when a video is successfully deleted.</p> Source code in <code>src/domain/enums/success_messages.py</code> <pre><code>class SuccessMessagesEnum(Enum):\n    \"\"\"\n    Enum for success messages used in the application.\n\n    This enum contains standardized messages for success responses,\n    such as when a video is created or deleted successfully. Using\n    enums for success messages helps ensure consistency across the\n    application.\n\n    Attributes:\n        VIDEO_CREATED_SUCCESS (str): Message returned when a video is successfully created.\n        VIDEO_DELETED_SUCCESS (str): Message returned when a video is successfully deleted.\n    \"\"\"\n\n    VIDEO_CREATED_SUCCESS = \"Video created successfully\"\n    VIDEOS_LISTED_SUCCESS = \"Video listed successfully\"\n    VIDEO_DELETED_SUCCESS = \"Video deleted successfully\"\n</code></pre>"},{"location":"codigo/source/domain/factories/video/","title":"Video","text":""},{"location":"codigo/source/domain/factories/video/#src.domain.factories.video.VideoFactory","title":"<code>VideoFactory</code>","text":"<p>A factory class for creating instances of VideoEntity.</p> Source code in <code>src/domain/factories/video.py</code> <pre><code>class VideoFactory:\n    \"\"\"\n    A factory class for creating instances of VideoEntity.\n    \"\"\"\n\n    @staticmethod\n    def create(\n        url: str,\n        id: Optional[uuid.UUID] = None,\n        created_at: Optional[datetime] = None,\n        updated_at: Optional[datetime] = None,\n    ) -&gt; VideoEntity:\n        \"\"\"\n        Creates and returns a new instance of VideoEntity with optional parameters for id, created_at, and updated_at.\n\n        Args:\n            url (str): The URL of the video. Must start with http or https.\n            id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n            created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n            updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n\n        Returns:\n            VideoEntity: A new instance of VideoEntity.\n        \"\"\"\n        return VideoEntity(\n            url=url,\n            id=id or uuid.uuid4(),\n            created_at=created_at or datetime.now(),\n            updated_at=updated_at,\n        )\n\n    @staticmethod\n    def create_with_defaults() -&gt; VideoEntity:\n        \"\"\"\n        Creates and returns a new instance of VideoEntity with default values.\n\n        Returns:\n            VideoEntity: A new instance of VideoEntity with default URL and current timestamp.\n        \"\"\"\n        default_url = \"https://example.com/default-video\"\n        return VideoFactory.create(url=default_url)\n</code></pre>"},{"location":"codigo/source/domain/factories/video/#src.domain.factories.video.VideoFactory.create","title":"<code>create(url, id=None, created_at=None, updated_at=None)</code>  <code>staticmethod</code>","text":"<p>Creates and returns a new instance of VideoEntity with optional parameters for id, created_at, and updated_at.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video. Must start with http or https.</p> required <code>id</code> <code>Optional[UUID]</code> <p>Unique identifier for the video. If None, a UUID will be generated.</p> <code>None</code> <code>created_at</code> <code>Optional[datetime]</code> <p>The creation time of the video. Defaults to the current time.</p> <code>None</code> <code>updated_at</code> <code>Optional[datetime]</code> <p>The last updated time of the video. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>A new instance of VideoEntity.</p> Source code in <code>src/domain/factories/video.py</code> <pre><code>@staticmethod\ndef create(\n    url: str,\n    id: Optional[uuid.UUID] = None,\n    created_at: Optional[datetime] = None,\n    updated_at: Optional[datetime] = None,\n) -&gt; VideoEntity:\n    \"\"\"\n    Creates and returns a new instance of VideoEntity with optional parameters for id, created_at, and updated_at.\n\n    Args:\n        url (str): The URL of the video. Must start with http or https.\n        id (Optional[uuid.UUID]): Unique identifier for the video. If None, a UUID will be generated.\n        created_at (Optional[datetime]): The creation time of the video. Defaults to the current time.\n        updated_at (Optional[datetime]): The last updated time of the video. Defaults to None.\n\n    Returns:\n        VideoEntity: A new instance of VideoEntity.\n    \"\"\"\n    return VideoEntity(\n        url=url,\n        id=id or uuid.uuid4(),\n        created_at=created_at or datetime.now(),\n        updated_at=updated_at,\n    )\n</code></pre>"},{"location":"codigo/source/domain/factories/video/#src.domain.factories.video.VideoFactory.create_with_defaults","title":"<code>create_with_defaults()</code>  <code>staticmethod</code>","text":"<p>Creates and returns a new instance of VideoEntity with default values.</p> <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>A new instance of VideoEntity with default URL and current timestamp.</p> Source code in <code>src/domain/factories/video.py</code> <pre><code>@staticmethod\ndef create_with_defaults() -&gt; VideoEntity:\n    \"\"\"\n    Creates and returns a new instance of VideoEntity with default values.\n\n    Returns:\n        VideoEntity: A new instance of VideoEntity with default URL and current timestamp.\n    \"\"\"\n    default_url = \"https://example.com/default-video\"\n    return VideoFactory.create(url=default_url)\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/","title":"Video","text":""},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository","title":"<code>AbstractVideoRepository</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for video repositories.</p> <p>This class defines the methods that any concrete video repository must implement.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>class AbstractVideoRepository(ABC):\n    \"\"\"Abstract base class for video repositories.\n\n    This class defines the methods that any concrete video repository must implement.\n    \"\"\"\n\n    @abstractmethod\n    def create(self, video: VideoEntity) -&gt; VideoEntity:\n        \"\"\"Creates a new video in the repository.\n\n        Args:\n            video (VideoEntity): The video entity to create.\n\n        Returns:\n            VideoEntity: The created video entity.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n        \"\"\"Finds a video by URL.\n\n        Args:\n            url (str): The URL of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n        \"\"\"Finds a video by ID.\n\n        Args:\n            id (str): The ID of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def find_all(self) -&gt; List[VideoEntity]:\n        \"\"\"Finds all videos in the repository.\n\n        Returns:\n            List[VideoEntity]: A list of all video entities in the repository.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def delete(self, video: VideoEntity) -&gt; None:\n        \"\"\"Deletes a video from the repository.\n\n        Args:\n            video (VideoEntity): The video entity to delete.\n\n        Raises:\n            Exception: If an error occurs during deletion.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.create","title":"<code>create(video)</code>  <code>abstractmethod</code>","text":"<p>Creates a new video in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to create.</p> required <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>The created video entity.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef create(self, video: VideoEntity) -&gt; VideoEntity:\n    \"\"\"Creates a new video in the repository.\n\n    Args:\n        video (VideoEntity): The video entity to create.\n\n    Returns:\n        VideoEntity: The created video entity.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.delete","title":"<code>delete(video)</code>  <code>abstractmethod</code>","text":"<p>Deletes a video from the repository.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to delete.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If an error occurs during deletion.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef delete(self, video: VideoEntity) -&gt; None:\n    \"\"\"Deletes a video from the repository.\n\n    Args:\n        video (VideoEntity): The video entity to delete.\n\n    Raises:\n        Exception: If an error occurs during deletion.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.find_all","title":"<code>find_all()</code>  <code>abstractmethod</code>","text":"<p>Finds all videos in the repository.</p> <p>Returns:</p> Type Description <code>List[VideoEntity]</code> <p>List[VideoEntity]: A list of all video entities in the repository.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef find_all(self) -&gt; List[VideoEntity]:\n    \"\"\"Finds all videos in the repository.\n\n    Returns:\n        List[VideoEntity]: A list of all video entities in the repository.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.find_by_id","title":"<code>find_by_id(id)</code>  <code>abstractmethod</code>","text":"<p>Finds a video by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n    \"\"\"Finds a video by ID.\n\n    Args:\n        id (str): The ID of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/repositories/video/#src.domain.repositories.videos.AbstractVideoRepository.find_by_url","title":"<code>find_by_url(url)</code>  <code>abstractmethod</code>","text":"<p>Finds a video by URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/domain/repositories/videos.py</code> <pre><code>@abstractmethod\ndef find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n    \"\"\"Finds a video by URL.\n\n    Args:\n        url (str): The URL of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/create/","title":"Create","text":""},{"location":"codigo/source/domain/use_cases/create/#src.domain.use_cases.create.AbstractCreateVideoUseCase","title":"<code>AbstractCreateVideoUseCase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract use case for video-related operations.</p> <p>This class defines the blueprint for handling video-related actions, such as creating a new video and checking for duplicates.</p> Source code in <code>src/domain/use_cases/create.py</code> <pre><code>class AbstractCreateVideoUseCase(ABC):\n    \"\"\"Abstract use case for video-related operations.\n\n    This class defines the blueprint for handling video-related actions,\n    such as creating a new video and checking for duplicates.\n    \"\"\"\n\n    @abstractmethod\n    def execute(self, url: str) -&gt; VideoEntity:\n        \"\"\"Abstract method for executing the video operation use case.\n\n        Args:\n            url (str): The URL of the video to create.\n\n        Returns:\n            VideoResponseDTO: The DTO containing the status code and created video entity.\n\n        Raises:\n            InvalidUrlError: If the URL is invalid or a video with the same URL already exists.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/create/#src.domain.use_cases.create.AbstractCreateVideoUseCase.execute","title":"<code>execute(url)</code>  <code>abstractmethod</code>","text":"<p>Abstract method for executing the video operation use case.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to create.</p> required <p>Returns:</p> Name Type Description <code>VideoResponseDTO</code> <code>VideoEntity</code> <p>The DTO containing the status code and created video entity.</p> <p>Raises:</p> Type Description <code>InvalidUrlError</code> <p>If the URL is invalid or a video with the same URL already exists.</p> Source code in <code>src/domain/use_cases/create.py</code> <pre><code>@abstractmethod\ndef execute(self, url: str) -&gt; VideoEntity:\n    \"\"\"Abstract method for executing the video operation use case.\n\n    Args:\n        url (str): The URL of the video to create.\n\n    Returns:\n        VideoResponseDTO: The DTO containing the status code and created video entity.\n\n    Raises:\n        InvalidUrlError: If the URL is invalid or a video with the same URL already exists.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/delete/","title":"Delete","text":""},{"location":"codigo/source/domain/use_cases/delete/#src.domain.use_cases.delete.AbstractDeleteVideoUseCase","title":"<code>AbstractDeleteVideoUseCase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for deleting a video by URL.</p> Source code in <code>src/domain/use_cases/delete.py</code> <pre><code>class AbstractDeleteVideoUseCase(ABC):\n    \"\"\"Abstract base class for deleting a video by URL.\"\"\"\n\n    @abstractmethod\n    def execute(self, id: str) -&gt; VideoResponseDTO:\n        \"\"\"Executes the use case to delete a video by its ID.\n\n        Args:\n            id (str): The ID of the video to delete.\n\n        Returns:\n            (str): A success message.\n\n        Raises:\n            Exception: If an error occurs during deletion.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/delete/#src.domain.use_cases.delete.AbstractDeleteVideoUseCase.execute","title":"<code>execute(id)</code>  <code>abstractmethod</code>","text":"<p>Executes the use case to delete a video by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the video to delete.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A success message.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If an error occurs during deletion.</p> Source code in <code>src/domain/use_cases/delete.py</code> <pre><code>@abstractmethod\ndef execute(self, id: str) -&gt; VideoResponseDTO:\n    \"\"\"Executes the use case to delete a video by its ID.\n\n    Args:\n        id (str): The ID of the video to delete.\n\n    Returns:\n        (str): A success message.\n\n    Raises:\n        Exception: If an error occurs during deletion.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/read_all/","title":"Read all","text":""},{"location":"codigo/source/domain/use_cases/read_all/#src.domain.use_cases.read_all.AbstractReadAllVideosUseCase","title":"<code>AbstractReadAllVideosUseCase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract use case for retrieving all videos.</p> <p>This class defines the blueprint for handling the retrieval of all video entities from the repository.</p> Source code in <code>src/domain/use_cases/read_all.py</code> <pre><code>class AbstractReadAllVideosUseCase(ABC):\n    \"\"\"Abstract use case for retrieving all videos.\n\n    This class defines the blueprint for handling the retrieval of all video entities from the repository.\n    \"\"\"\n\n    @abstractmethod\n    def execute(self) -&gt; List[VideoEntity]:\n        \"\"\"Abstract method for retrieving all videos.\n\n        This method should be implemented by subclasses to return a list of videos.\n\n        Returns:\n            (VideoNotFoundError): If no videos are found in the repository.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"codigo/source/domain/use_cases/read_all/#src.domain.use_cases.read_all.AbstractReadAllVideosUseCase.execute","title":"<code>execute()</code>  <code>abstractmethod</code>","text":"<p>Abstract method for retrieving all videos.</p> <p>This method should be implemented by subclasses to return a list of videos.</p> <p>Returns:</p> Type Description <code>VideoNotFoundError</code> <p>If no videos are found in the repository.</p> Source code in <code>src/domain/use_cases/read_all.py</code> <pre><code>@abstractmethod\ndef execute(self) -&gt; List[VideoEntity]:\n    \"\"\"Abstract method for retrieving all videos.\n\n    This method should be implemented by subclasses to return a list of videos.\n\n    Returns:\n        (VideoNotFoundError): If no videos are found in the repository.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"codigo/source/infrastructure/database/connection/","title":"Connection","text":""},{"location":"codigo/source/infrastructure/database/connection/#src.infrastructure.database.connection.get_db","title":"<code>get_db()</code>","text":"<p>Dependency that provides a database session for each request.</p> <p>This function manages the lifecycle of a database session. It opens a new session and ensures that the session is closed after the request is completed.</p> <p>Yields:</p> Type Description <code>SessionLocal</code> <p>The database session object.</p> Source code in <code>src/infrastructure/database/connection.py</code> <pre><code>def get_db():\n    \"\"\"\n    Dependency that provides a database session for each request.\n\n    This function manages the lifecycle of a database session. It opens a\n    new session and ensures that the session is closed after the request\n    is completed.\n\n    Yields:\n        (SessionLocal): The database session object.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"codigo/source/infrastructure/database/models/connection/","title":"Connection","text":""},{"location":"codigo/source/infrastructure/database/models/connection/#src.infrastructure.database.models.video.VideoModel","title":"<code>VideoModel</code>","text":"<p>               Bases: <code>Base</code></p> <p>A SQLAlchemy model representing the 'videos' table in the database.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>UUID</code> <p>Unique identifier for each video. It is automatically generated using UUID.</p> <code>url</code> <code>str</code> <p>The URL of the video, which must start with \"http\" or \"https\".</p> <code>created_at</code> <code>datetime</code> <p>Timestamp representing when the video record was created. Defaults to the current UTC time.</p> <code>updated_at</code> <code>datetime</code> <p>Timestamp representing when the video record was last updated. This can be null if no update has occurred.</p> <p>Methods:</p> Name Description <code>validate_url</code> <p>Validates that the URL follows the correct format (starting with \"http\" or \"https\"). Raises InvalidUrlError if the URL does not match the expected pattern.</p> Source code in <code>src/infrastructure/database/models/video.py</code> <pre><code>class VideoModel(Base):\n    \"\"\"\n    A SQLAlchemy model representing the 'videos' table in the database.\n\n    Attributes:\n        id (UUID): Unique identifier for each video. It is automatically generated using UUID.\n        url (str): The URL of the video, which must start with \"http\" or \"https\".\n        created_at (datetime): Timestamp representing when the video record was created. Defaults to the current UTC time.\n        updated_at (datetime): Timestamp representing when the video record was last updated. This can be null if no update has occurred.\n\n    Methods:\n        validate_url(key, url):\n            Validates that the URL follows the correct format (starting with \"http\" or \"https\").\n            Raises InvalidUrlError if the URL does not match the expected pattern.\n    \"\"\"\n\n    __tablename__ = \"videos\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    url = Column(String, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, nullable=True)\n\n    URL_REGEX = re.compile(r\"^(http|https)://\")\n\n    @validates(\"url\")\n    def validate_url(self, key, url):\n        \"\"\"\n        Validates the 'url' field to ensure it starts with \"http\" or \"https\".\n\n        Args:\n            key (str): The field name being validated (in this case, 'url').\n            url (str): The URL string to validate.\n\n        Returns:\n            (str): The validated URL if it matches the required pattern.\n\n        Raises:\n            InvalidUrlError: If the URL does not match the required \"http\" or \"https\" format.\n        \"\"\"\n        if not self.URL_REGEX.match(url):\n            raise InvalidUrlError(\n                message=ErrorMessagesEnum.INVALID_URL.value, name=\"InvalidUrl\"\n            )\n        return url\n</code></pre>"},{"location":"codigo/source/infrastructure/database/models/connection/#src.infrastructure.database.models.video.VideoModel.validate_url","title":"<code>validate_url(key, url)</code>","text":"<p>Validates the 'url' field to ensure it starts with \"http\" or \"https\".</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The field name being validated (in this case, 'url').</p> required <code>url</code> <code>str</code> <p>The URL string to validate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The validated URL if it matches the required pattern.</p> <p>Raises:</p> Type Description <code>InvalidUrlError</code> <p>If the URL does not match the required \"http\" or \"https\" format.</p> Source code in <code>src/infrastructure/database/models/video.py</code> <pre><code>@validates(\"url\")\ndef validate_url(self, key, url):\n    \"\"\"\n    Validates the 'url' field to ensure it starts with \"http\" or \"https\".\n\n    Args:\n        key (str): The field name being validated (in this case, 'url').\n        url (str): The URL string to validate.\n\n    Returns:\n        (str): The validated URL if it matches the required pattern.\n\n    Raises:\n        InvalidUrlError: If the URL does not match the required \"http\" or \"https\" format.\n    \"\"\"\n    if not self.URL_REGEX.match(url):\n        raise InvalidUrlError(\n            message=ErrorMessagesEnum.INVALID_URL.value, name=\"InvalidUrl\"\n        )\n    return url\n</code></pre>"},{"location":"codigo/source/infrastructure/mappers/video/","title":"Video","text":""},{"location":"codigo/source/infrastructure/mappers/video/#src.infrastructure.mappers.video.VideoMapper","title":"<code>VideoMapper</code>","text":"<p>A mapper class that converts between VideoEntity (domain) and VideoModel (infrastructure).</p> Source code in <code>src/infrastructure/mappers/video.py</code> <pre><code>class VideoMapper:\n    \"\"\"\n    A mapper class that converts between VideoEntity (domain) and VideoModel (infrastructure).\n    \"\"\"\n\n    @staticmethod\n    def to_entity(video_model: VideoModel) -&gt; VideoEntity:\n        \"\"\"\n        Converts a VideoModel instance into a VideoEntity.\n\n        Args:\n            video_model (VideoModel): The database model of the video.\n\n        Returns:\n            VideoEntity: The corresponding domain entity.\n        \"\"\"\n        return VideoEntity(\n            id=video_model.id,\n            url=video_model.url,\n            created_at=video_model.created_at,\n            updated_at=video_model.updated_at,\n        )\n\n    @staticmethod\n    def to_model(video_entity: VideoEntity) -&gt; VideoModel:\n        \"\"\"\n        Converts a VideoEntity instance into a VideoModel.\n\n        Args:\n            video_entity (VideoEntity): The domain entity of the video.\n\n        Returns:\n            VideoModel: The corresponding database model.\n        \"\"\"\n        return VideoModel(\n            id=video_entity.id,\n            url=video_entity.url,\n            created_at=video_entity.created_at,\n            updated_at=video_entity.updated_at,\n        )\n</code></pre>"},{"location":"codigo/source/infrastructure/mappers/video/#src.infrastructure.mappers.video.VideoMapper.to_entity","title":"<code>to_entity(video_model)</code>  <code>staticmethod</code>","text":"<p>Converts a VideoModel instance into a VideoEntity.</p> <p>Parameters:</p> Name Type Description Default <code>video_model</code> <code>VideoModel</code> <p>The database model of the video.</p> required <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>The corresponding domain entity.</p> Source code in <code>src/infrastructure/mappers/video.py</code> <pre><code>@staticmethod\ndef to_entity(video_model: VideoModel) -&gt; VideoEntity:\n    \"\"\"\n    Converts a VideoModel instance into a VideoEntity.\n\n    Args:\n        video_model (VideoModel): The database model of the video.\n\n    Returns:\n        VideoEntity: The corresponding domain entity.\n    \"\"\"\n    return VideoEntity(\n        id=video_model.id,\n        url=video_model.url,\n        created_at=video_model.created_at,\n        updated_at=video_model.updated_at,\n    )\n</code></pre>"},{"location":"codigo/source/infrastructure/mappers/video/#src.infrastructure.mappers.video.VideoMapper.to_model","title":"<code>to_model(video_entity)</code>  <code>staticmethod</code>","text":"<p>Converts a VideoEntity instance into a VideoModel.</p> <p>Parameters:</p> Name Type Description Default <code>video_entity</code> <code>VideoEntity</code> <p>The domain entity of the video.</p> required <p>Returns:</p> Name Type Description <code>VideoModel</code> <code>VideoModel</code> <p>The corresponding database model.</p> Source code in <code>src/infrastructure/mappers/video.py</code> <pre><code>@staticmethod\ndef to_model(video_entity: VideoEntity) -&gt; VideoModel:\n    \"\"\"\n    Converts a VideoEntity instance into a VideoModel.\n\n    Args:\n        video_entity (VideoEntity): The domain entity of the video.\n\n    Returns:\n        VideoModel: The corresponding database model.\n    \"\"\"\n    return VideoModel(\n        id=video_entity.id,\n        url=video_entity.url,\n        created_at=video_entity.created_at,\n        updated_at=video_entity.updated_at,\n    )\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/","title":"Video","text":""},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository","title":"<code>VideoRepository</code>","text":"<p>               Bases: <code>AbstractVideoRepository</code></p> <p>Concrete implementation of the AbstractVideoRepository using SQLAlchemy.</p> <p>This repository is responsible for managing video data in the database.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>class VideoRepository(AbstractVideoRepository):\n    \"\"\"\n    Concrete implementation of the AbstractVideoRepository using SQLAlchemy.\n\n    This repository is responsible for managing video data in the database.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initializes the repository with a SQLAlchemy session.\n\n        Args:\n            session (Session): The SQLAlchemy session used for database interactions.\n        \"\"\"\n        self.session = session\n\n    def create(self, video: VideoEntity) -&gt; VideoEntity:\n        \"\"\"\n        Creates a new video in the database.\n\n        Args:\n            video (VideoEntity): The video entity to create.\n\n        Returns:\n            VideoEntity: The created video entity.\n        \"\"\"\n        video_model = VideoMapper.to_model(video)\n        self.session.add(video_model)\n        self.session.commit()\n        self.session.refresh(\n            video_model\n        )  # Refresh to get the updated fields like 'id'\n        return VideoMapper.to_entity(video_model)\n\n    def find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n        \"\"\"\n        Finds a video by its URL in the database.\n\n        Args:\n            url (str): The URL of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        video_model = self.session.query(VideoModel).filter_by(url=url).first()\n        if video_model:\n            return VideoMapper.to_entity(video_model)\n        return None\n\n    def find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n        \"\"\"\n        Finds a video by its Id in the database.\n\n        Args:\n            id (str): The Id of the video to find.\n\n        Returns:\n            Optional[VideoEntity]: The found video entity or None if not found.\n        \"\"\"\n        video_model = self.session.query(VideoModel).filter_by(id=id).first()\n        if video_model:\n            return VideoMapper.to_entity(video_model)\n        return None\n\n    def find_all(self) -&gt; List[VideoEntity]:\n        \"\"\"\n        Retrieves all video entities from the database.\n\n        Returns:\n            List[VideoEntity]: A list of all video entities.\n        \"\"\"\n        video_models = self.session.query(VideoModel).all()\n        return [\n            VideoMapper.to_entity(video_model) for video_model in video_models\n        ]\n\n    def delete(self, video: VideoEntity) -&gt; None:\n        \"\"\"\n        Deletes a video from the database.\n\n        Args:\n            video (VideoEntity): The video entity to delete.\n        \"\"\"\n        video_model = (\n            self.session.query(VideoModel).filter_by(id=video.id).first()\n        )\n        if video_model:\n            self.session.delete(video_model)\n            self.session.commit()\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.__init__","title":"<code>__init__(session)</code>","text":"<p>Initializes the repository with a SQLAlchemy session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The SQLAlchemy session used for database interactions.</p> required Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def __init__(self, session: Session):\n    \"\"\"\n    Initializes the repository with a SQLAlchemy session.\n\n    Args:\n        session (Session): The SQLAlchemy session used for database interactions.\n    \"\"\"\n    self.session = session\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.create","title":"<code>create(video)</code>","text":"<p>Creates a new video in the database.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to create.</p> required <p>Returns:</p> Name Type Description <code>VideoEntity</code> <code>VideoEntity</code> <p>The created video entity.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def create(self, video: VideoEntity) -&gt; VideoEntity:\n    \"\"\"\n    Creates a new video in the database.\n\n    Args:\n        video (VideoEntity): The video entity to create.\n\n    Returns:\n        VideoEntity: The created video entity.\n    \"\"\"\n    video_model = VideoMapper.to_model(video)\n    self.session.add(video_model)\n    self.session.commit()\n    self.session.refresh(\n        video_model\n    )  # Refresh to get the updated fields like 'id'\n    return VideoMapper.to_entity(video_model)\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.delete","title":"<code>delete(video)</code>","text":"<p>Deletes a video from the database.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>VideoEntity</code> <p>The video entity to delete.</p> required Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def delete(self, video: VideoEntity) -&gt; None:\n    \"\"\"\n    Deletes a video from the database.\n\n    Args:\n        video (VideoEntity): The video entity to delete.\n    \"\"\"\n    video_model = (\n        self.session.query(VideoModel).filter_by(id=video.id).first()\n    )\n    if video_model:\n        self.session.delete(video_model)\n        self.session.commit()\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.find_all","title":"<code>find_all()</code>","text":"<p>Retrieves all video entities from the database.</p> <p>Returns:</p> Type Description <code>List[VideoEntity]</code> <p>List[VideoEntity]: A list of all video entities.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def find_all(self) -&gt; List[VideoEntity]:\n    \"\"\"\n    Retrieves all video entities from the database.\n\n    Returns:\n        List[VideoEntity]: A list of all video entities.\n    \"\"\"\n    video_models = self.session.query(VideoModel).all()\n    return [\n        VideoMapper.to_entity(video_model) for video_model in video_models\n    ]\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.find_by_id","title":"<code>find_by_id(id)</code>","text":"<p>Finds a video by its Id in the database.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Id of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def find_by_id(self, id: str) -&gt; Optional[VideoEntity]:\n    \"\"\"\n    Finds a video by its Id in the database.\n\n    Args:\n        id (str): The Id of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    video_model = self.session.query(VideoModel).filter_by(id=id).first()\n    if video_model:\n        return VideoMapper.to_entity(video_model)\n    return None\n</code></pre>"},{"location":"codigo/source/infrastructure/repositories/video/#src.infrastructure.repositories.video.VideoRepository.find_by_url","title":"<code>find_by_url(url)</code>","text":"<p>Finds a video by its URL in the database.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video to find.</p> required <p>Returns:</p> Type Description <code>Optional[VideoEntity]</code> <p>Optional[VideoEntity]: The found video entity or None if not found.</p> Source code in <code>src/infrastructure/repositories/video.py</code> <pre><code>def find_by_url(self, url: str) -&gt; Optional[VideoEntity]:\n    \"\"\"\n    Finds a video by its URL in the database.\n\n    Args:\n        url (str): The URL of the video to find.\n\n    Returns:\n        Optional[VideoEntity]: The found video entity or None if not found.\n    \"\"\"\n    video_model = self.session.query(VideoModel).filter_by(url=url).first()\n    if video_model:\n        return VideoMapper.to_entity(video_model)\n    return None\n</code></pre>"},{"location":"codigo/source/presentation/handlers/exception_handlers/","title":"Exception handlers","text":""},{"location":"codigo/source/presentation/handlers/exception_handlers/#src.presentation.handlers.exception_handlers.create_exception_handler","title":"<code>create_exception_handler(status_code, initial_detail)</code>","text":"<p>Creates a custom exception handler for FastAPI.</p> <p>This function generates a handler that manages exceptions by returning a JSON response with a custom error message and status code. It is designed for handling specific validation errors in video operations.</p> <p>Parameters:</p> Name Type Description Default <code>status_code</code> <code>int</code> <p>The HTTP status code to return with the exception response.</p> required <code>initial_detail</code> <code>str</code> <p>The initial error message to include in the response.</p> required <p>Returns:</p> Type Description <code>Callable[[Request, VideoValidationError], JSONResponse]</code> <p>Callable[[Request, VideoValidationError], JSONResponse]: A custom exception handler</p> <code>Callable[[Request, VideoValidationError], JSONResponse]</code> <p>function that returns a JSONResponse with the provided status code and error message.</p> Source code in <code>src/presentation/handlers/exception_handlers.py</code> <pre><code>def create_exception_handler(\n    status_code: int, initial_detail: str\n) -&gt; Callable[[Request, VideoValidationError], JSONResponse]:\n    \"\"\"\n    Creates a custom exception handler for FastAPI.\n\n    This function generates a handler that manages exceptions by returning\n    a JSON response with a custom error message and status code. It is designed\n    for handling specific validation errors in video operations.\n\n    Args:\n        status_code (int): The HTTP status code to return with the exception response.\n        initial_detail (str): The initial error message to include in the response.\n\n    Returns:\n        Callable[[Request, VideoValidationError], JSONResponse]: A custom exception handler\n        function that returns a JSONResponse with the provided status code and error message.\n    \"\"\"\n    detail = {\"message\": initial_detail}\n\n    async def exception_handler(\n        _: Request, exc: VideoValidationError\n    ) -&gt; JSONResponse:\n        \"\"\"\n        Handles the actual exception by returning a JSON response with the relevant error message.\n\n        Args:\n            _: The incoming request (not used in the function but required by FastAPI).\n            exc (VideoValidationError): The exception that was raised during validation.\n\n        Returns:\n            JSONResponse: The response containing the error message and status code.\n        \"\"\"\n        if exc.message:\n            detail[\"message\"] = exc.message\n\n        if exc.name:\n            detail[\"message\"] = f\"{detail['message']}\"\n\n        return JSONResponse(\n            status_code=status_code, content={\"detail\": detail[\"message\"]}\n        )\n\n    return exception_handler\n</code></pre>"},{"location":"codigo/source/presentation/handlers/exception_handlers/#src.presentation.handlers.exception_handlers.register_exception_handlers","title":"<code>register_exception_handlers(app)</code>","text":"<p>Registers custom exception handlers to the FastAPI application.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>FastAPI</code> <p>The FastAPI application instance.</p> required Source code in <code>src/presentation/handlers/exception_handlers.py</code> <pre><code>def register_exception_handlers(app: FastAPI):\n    \"\"\"\n    Registers custom exception handlers to the FastAPI application.\n\n    Args:\n        app (FastAPI): The FastAPI application instance.\n    \"\"\"\n    app.add_exception_handler(\n        exc_class_or_status_code=DuplicateUrlError,\n        handler=create_exception_handler(\n            status.HTTP_400_BAD_REQUEST, ErrorMessagesEnum.DUPLICATE_URL.value\n        ),\n    )\n    app.add_exception_handler(\n        exc_class_or_status_code=InvalidUrlError,\n        handler=create_exception_handler(\n            status.HTTP_400_BAD_REQUEST, ErrorMessagesEnum.INVALID_URL.value\n        ),\n    )\n    app.add_exception_handler(\n        exc_class_or_status_code=VideoNotFoundError,\n        handler=create_exception_handler(\n            status.HTTP_404_NOT_FOUND, ErrorMessagesEnum.NO_VIDEOS_FOUND.value\n        ),\n    )\n</code></pre>"},{"location":"codigo/source/presentation/routers/video/","title":"Video","text":""},{"location":"codigo/source/presentation/routers/video/#src.presentation.routers.video.create_video","title":"<code>create_video(video, db=Depends(get_db))</code>","text":"<p>Creates a new video entry in the database.</p> <p>This endpoint allows the user to create a new video by providing the necessary details in the request body. The video information will be stored in the database, and a success message is returned.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>CreateVideoSchema</code> <p>The schema that contains the video data, including title, description, duration, and url.</p> required <code>db</code> <code>Session</code> <p>The database session dependency, provided by FastAPI's Depends.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <code>dict</code> <p>A response containing a success message and the created video's URL in the data field.</p> Example <p>Response: {     \"message\": \"Video created successfully\",     \"data\": {         \"url\": \"https://www.example.com/video\"     } }</p> Source code in <code>src/presentation/routers/video.py</code> <pre><code>@router.post(\n    \"/\",\n    status_code=status.HTTP_201_CREATED,\n    summary=\"Create a new video\",\n    description=\"Create a new video with the provided data in the request body.\",\n    response_model=SuccessMessageSchema,\n)\ndef create_video(video: CreateVideoSchema, db: Session = Depends(get_db)):\n    \"\"\"\n    Creates a new video entry in the database.\n\n    This endpoint allows the user to create a new video by providing\n    the necessary details in the request body. The video information\n    will be stored in the database, and a success message is returned.\n\n    Args:\n        video (CreateVideoSchema): The schema that contains the video data, including title, description, duration, and url.\n        db (Session, optional): The database session dependency, provided by FastAPI's Depends.\n\n    Returns:\n        (dict): A response containing a success message and the created video's URL in the data field.\n\n    Example:\n        Response:\n        {\n            \"message\": \"Video created successfully\",\n            \"data\": {\n                \"url\": \"https://www.example.com/video\"\n            }\n        }\n    \"\"\"\n    repository = VideoRepository(session=db)\n    use_case = CreateVideoUseCase(video_repository=repository)\n    created_video = use_case.execute(video.url)\n    response_data = SuccessMessageSchema(\n        message=SuccessMessagesEnum.VIDEO_CREATED_SUCCESS.value,\n        data={\"id\": created_video.id, \"url\": created_video.url},\n    )\n    return response_data\n</code></pre>"},{"location":"codigo/source/presentation/routers/video/#src.presentation.routers.video.delete_video","title":"<code>delete_video(video_id, db=Depends(get_db))</code>","text":"<p>Deletes a video entry from the database.</p> <p>This endpoint allows the user to delete a video by providing the unique video ID in the request path. If the video is successfully deleted, a 204 No Content response is returned.</p> <p>Parameters:</p> Name Type Description Default <code>video_id</code> <code>str</code> <p>The unique identifier of the video to be deleted.</p> required <code>db</code> <code>Session</code> <p>The database session dependency, provided by FastAPI's Depends.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <code>None</code> <p>A response with no content (204).</p> Source code in <code>src/presentation/routers/video.py</code> <pre><code>@router.delete(\n    \"/{video_id}\",\n    status_code=status.HTTP_204_NO_CONTENT,\n    summary=\"Delete a video\",\n    description=\"Delete a video from the database by its ID.\",\n)\ndef delete_video(video_id: UUID, db: Session = Depends(get_db)):\n    \"\"\"\n    Deletes a video entry from the database.\n\n    This endpoint allows the user to delete a video by providing\n    the unique video ID in the request path. If the video is\n    successfully deleted, a 204 No Content response is returned.\n\n    Args:\n        video_id (str): The unique identifier of the video to be deleted.\n        db (Session, optional): The database session dependency, provided by FastAPI's Depends.\n\n    Returns:\n        (None): A response with no content (204).\n    \"\"\"\n    repository = VideoRepository(session=db)\n    use_case = DeleteVideoUseCase(video_repository=repository)\n    use_case.execute(id=video_id)\n\n    return None\n</code></pre>"},{"location":"codigo/source/presentation/routers/video/#src.presentation.routers.video.read_all_videos","title":"<code>read_all_videos(db=Depends(get_db))</code>","text":"<p>Retrieves all videos from the database.</p> <p>This endpoint fetches all videos stored in the database and returns only the 'id' and 'url' fields of each video in the response data.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>The database session dependency, provided by FastAPI's Depends.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <code>dict</code> <p>A response containing a success message and a list of video objects with 'id' and 'url' fields.</p> Source code in <code>src/presentation/routers/video.py</code> <pre><code>@router.get(\n    \"/\",\n    status_code=status.HTTP_200_OK,\n    summary=\"Read all videos\",\n    description=\"Retrieve all videos from the database.\",\n    response_model=SuccessMessageSchema,\n)\ndef read_all_videos(db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieves all videos from the database.\n\n    This endpoint fetches all videos stored in the database and returns\n    only the 'id' and 'url' fields of each video in the response data.\n\n    Args:\n        db (Session, optional): The database session dependency, provided by FastAPI's Depends.\n\n    Returns:\n        (dict): A response containing a success message and a list of video objects with 'id' and 'url' fields.\n    \"\"\"\n    repository = VideoRepository(session=db)\n    use_case = ReadAllVideosUseCase(video_repository=repository)\n    videos = use_case.execute()\n    videos_data = [{\"id\": video.id, \"url\": video.url} for video in videos]\n    response_data = SuccessMessageSchema(\n        message=SuccessMessagesEnum.VIDEOS_LISTED_SUCCESS.value,\n        data=videos_data,\n    )\n\n    return response_data\n</code></pre>"},{"location":"codigo/source/presentation/schemas/create_video/","title":"Create video","text":""},{"location":"codigo/source/presentation/schemas/create_video/#src.presentation.schemas.create_video.CreateVideoSchema","title":"<code>CreateVideoSchema</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for creating a new video.</p> <p>This schema defines the structure of the request body required to create a new video. It expects a URL of the video that will be stored in the database.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>The URL of the video that is being created. Must be a valid string.</p> Source code in <code>src/presentation/schemas/create_video.py</code> <pre><code>class CreateVideoSchema(BaseModel):\n    \"\"\"\n    Schema for creating a new video.\n\n    This schema defines the structure of the request body required to create\n    a new video. It expects a URL of the video that will be stored in the database.\n\n    Attributes:\n        url (str): The URL of the video that is being created. Must be a valid string.\n    \"\"\"\n\n    url: str = Field(..., description=\"Video URL\")\n</code></pre>"},{"location":"codigo/source/presentation/schemas/success_message/","title":"Success message","text":""},{"location":"codigo/source/presentation/schemas/success_message/#src.presentation.schemas.success_message.SuccessMessageSchema","title":"<code>SuccessMessageSchema</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for a success response message.</p> <p>This schema defines the structure of the response returned upon successful execution of a request. It includes a mandatory success message and optional data containing additional information related to the operation.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>A required field containing the success message.</p> <code>data</code> <code>Optional[Any]</code> <p>Optional additional data that can provide extra details                   related to the operation. The structure of <code>data</code> is flexible.</p> Source code in <code>src/presentation/schemas/success_message.py</code> <pre><code>class SuccessMessageSchema(BaseModel):\n    \"\"\"\n    Schema for a success response message.\n\n    This schema defines the structure of the response returned upon successful\n    execution of a request. It includes a mandatory success message and optional\n    data containing additional information related to the operation.\n\n    Attributes:\n        message (str): A required field containing the success message.\n        data (Optional[Any]): Optional additional data that can provide extra details\n                              related to the operation. The structure of `data` is flexible.\n    \"\"\"\n\n    message: str = Field(..., description=\"Success message\")\n    data: Optional[Any] = Field(\n        None, description=\"Optional data related to the success message\"\n    )\n</code></pre>"}]}